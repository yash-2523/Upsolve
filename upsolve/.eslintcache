[{"E:\\Projects\\Upsolve\\upsolve\\src\\index.js":"1","E:\\Projects\\Upsolve\\upsolve\\src\\App.js":"2","E:\\Projects\\Upsolve\\upsolve\\src\\reportWebVitals.js":"3","E:\\Projects\\Upsolve\\upsolve\\src\\loginPage.js":"4","E:\\Projects\\Upsolve\\upsolve\\src\\HomePage.js":"5","E:\\Projects\\Upsolve\\upsolve\\src\\LogoutPage.js":"6","E:\\Projects\\Upsolve\\upsolve\\src\\ErroPage.js":"7","E:\\Projects\\Upsolve\\upsolve\\src\\RegisterPage.js":"8","E:\\Projects\\Upsolve\\upsolve\\src\\Leaderboard\\LeaderboardPage.js":"9","E:\\Projects\\Upsolve\\upsolve\\src\\Challenge\\Challenge.js":"10","E:\\Projects\\Upsolve\\upsolve\\src\\Profile\\ProfileRoute.js":"11","E:\\Projects\\Upsolve\\upsolve\\src\\NavigationMenu.js":"12","E:\\Projects\\Upsolve\\upsolve\\src\\BoxTitile.js":"13","E:\\Projects\\Upsolve\\upsolve\\src\\Leaderboard\\leaderboard.js":"14","E:\\Projects\\Upsolve\\upsolve\\src\\Api\\problem.api.js":"15","E:\\Projects\\Upsolve\\upsolve\\src\\Api\\auth.api.js":"16","E:\\Projects\\Upsolve\\upsolve\\src\\Challenge\\ChallengeContent.js":"17","E:\\Projects\\Upsolve\\upsolve\\src\\authGaurd.js":"18","E:\\Projects\\Upsolve\\upsolve\\src\\Profile\\ProfilePage.js":"19","E:\\Projects\\Upsolve\\upsolve\\src\\Leaderboard\\entry.js":"20","E:\\Projects\\Upsolve\\upsolve\\src\\Challenge\\ChallengeTimer.js":"21","E:\\Projects\\Upsolve\\upsolve\\src\\Challenge\\ChallengeDailyQues.js":"22","E:\\Projects\\Upsolve\\upsolve\\src\\Challenge\\ChallengeUpsolveQues.js":"23","E:\\Projects\\Upsolve\\upsolve\\src\\Challenge\\ProblemDescription.js":"24","E:\\Projects\\Upsolve\\upsolve\\src\\Challenge\\ProblemCardTitle.js":"25","C:\\Users\\yash\\Documents\\Projects\\CodeForces\\Upsolve\\upsolve\\src\\index.js":"26","C:\\Users\\yash\\Documents\\Projects\\CodeForces\\Upsolve\\upsolve\\src\\reportWebVitals.js":"27","C:\\Users\\yash\\Documents\\Projects\\CodeForces\\Upsolve\\upsolve\\src\\App.js":"28","C:\\Users\\yash\\Documents\\Projects\\CodeForces\\Upsolve\\upsolve\\src\\HomePage.js":"29","C:\\Users\\yash\\Documents\\Projects\\CodeForces\\Upsolve\\upsolve\\src\\LogoutPage.js":"30","C:\\Users\\yash\\Documents\\Projects\\CodeForces\\Upsolve\\upsolve\\src\\ErroPage.js":"31","C:\\Users\\yash\\Documents\\Projects\\CodeForces\\Upsolve\\upsolve\\src\\Challenge\\Challenge.js":"32","C:\\Users\\yash\\Documents\\Projects\\CodeForces\\Upsolve\\upsolve\\src\\Leaderboard\\LeaderboardPage.js":"33","C:\\Users\\yash\\Documents\\Projects\\CodeForces\\Upsolve\\upsolve\\src\\Profile\\ProfileRoute.js":"34","C:\\Users\\yash\\Documents\\Projects\\CodeForces\\Upsolve\\upsolve\\src\\loginPage.js":"35","C:\\Users\\yash\\Documents\\Projects\\CodeForces\\Upsolve\\upsolve\\src\\RegisterPage.js":"36","C:\\Users\\yash\\Documents\\Projects\\CodeForces\\Upsolve\\upsolve\\src\\NavigationMenu.js":"37","C:\\Users\\yash\\Documents\\Projects\\CodeForces\\Upsolve\\upsolve\\src\\Leaderboard\\leaderboard.js":"38","C:\\Users\\yash\\Documents\\Projects\\CodeForces\\Upsolve\\upsolve\\src\\Challenge\\ChallengeContent.js":"39","C:\\Users\\yash\\Documents\\Projects\\CodeForces\\Upsolve\\upsolve\\src\\authGaurd.js":"40","C:\\Users\\yash\\Documents\\Projects\\CodeForces\\Upsolve\\upsolve\\src\\Api\\problem.api.js":"41","C:\\Users\\yash\\Documents\\Projects\\CodeForces\\Upsolve\\upsolve\\src\\Profile\\ProfilePage.js":"42","C:\\Users\\yash\\Documents\\Projects\\CodeForces\\Upsolve\\upsolve\\src\\BoxTitile.js":"43","C:\\Users\\yash\\Documents\\Projects\\CodeForces\\Upsolve\\upsolve\\src\\Api\\auth.api.js":"44","C:\\Users\\yash\\Documents\\Projects\\CodeForces\\Upsolve\\upsolve\\src\\Challenge\\ChallengeTimer.js":"45","C:\\Users\\yash\\Documents\\Projects\\CodeForces\\Upsolve\\upsolve\\src\\Challenge\\ChallengeDailyQues.js":"46","C:\\Users\\yash\\Documents\\Projects\\CodeForces\\Upsolve\\upsolve\\src\\Leaderboard\\entry.js":"47","C:\\Users\\yash\\Documents\\Projects\\CodeForces\\Upsolve\\upsolve\\src\\Challenge\\ChallengeUpsolveQues.js":"48","C:\\Users\\yash\\Documents\\Projects\\CodeForces\\Upsolve\\upsolve\\src\\Challenge\\ProblemCardTitle.js":"49","C:\\Users\\yash\\Documents\\Projects\\CodeForces\\Upsolve\\upsolve\\src\\Challenge\\ProblemDescription.js":"50","C:\\Users\\yash\\Documents\\Projects\\CodeForces\\Upsolve\\upsolve\\src\\models\\UpsolveText.js":"51","C:\\Users\\yash\\Documents\\Projects\\CodeForces\\Upsolve\\upsolve\\src\\constants.js":"52","C:\\Users\\yash\\Documents\\Projects\\CodeForces\\Upsolve\\upsolve\\src\\About\\AboutPage.js":"53","C:\\Users\\yash\\Documents\\Projects\\CodeForces\\Upsolve\\upsolve\\src\\About\\Team.js":"54","C:\\Users\\yash\\Documents\\Projects\\CodeForces\\Upsolve\\upsolve\\src\\About\\UpsolveDesc.js":"55","C:\\Users\\yash\\Documents\\Projects\\CodeForces\\Upsolve\\upsolve\\src\\About\\ContactUs.js":"56","C:\\Users\\yash\\Documents\\Projects\\CodeForces\\Upsolve\\upsolve\\src\\Api\\feedback.api.js":"57"},{"size":480,"mtime":1610010526093,"results":"58","hashOfConfig":"59"},{"size":1225,"mtime":1610010526084,"results":"60","hashOfConfig":"59"},{"size":375,"mtime":1608887333064,"results":"61","hashOfConfig":"59"},{"size":2550,"mtime":1610011197211,"results":"62","hashOfConfig":"59"},{"size":322,"mtime":1610010526088,"results":"63","hashOfConfig":"59"},{"size":305,"mtime":1610010526091,"results":"64","hashOfConfig":"59"},{"size":417,"mtime":1610010526088,"results":"65","hashOfConfig":"59"},{"size":5877,"mtime":1610010526092,"results":"66","hashOfConfig":"59"},{"size":2829,"mtime":1610010526090,"results":"67","hashOfConfig":"59"},{"size":434,"mtime":1610010526085,"results":"68","hashOfConfig":"59"},{"size":1081,"mtime":1610010526092,"results":"69","hashOfConfig":"59"},{"size":1886,"mtime":1610010526091,"results":"70","hashOfConfig":"59"},{"size":191,"mtime":1610010526085,"results":"71","hashOfConfig":"59"},{"size":2050,"mtime":1610010526091,"results":"72","hashOfConfig":"59"},{"size":1648,"mtime":1610010526084,"results":"73","hashOfConfig":"59"},{"size":1456,"mtime":1610015222793,"results":"74","hashOfConfig":"59"},{"size":1771,"mtime":1610010526085,"results":"75","hashOfConfig":"59"},{"size":523,"mtime":1610010526092,"results":"76","hashOfConfig":"59"},{"size":26228,"mtime":1610011571709,"results":"77","hashOfConfig":"59"},{"size":2008,"mtime":1610010526090,"results":"78","hashOfConfig":"59"},{"size":1009,"mtime":1610010526086,"results":"79","hashOfConfig":"59"},{"size":1515,"mtime":1610010526086,"results":"80","hashOfConfig":"59"},{"size":1697,"mtime":1610010526086,"results":"81","hashOfConfig":"59"},{"size":2628,"mtime":1610010526087,"results":"82","hashOfConfig":"59"},{"size":481,"mtime":1610010526087,"results":"83","hashOfConfig":"59"},{"size":480,"mtime":1609326057708,"results":"84","hashOfConfig":"85"},{"size":375,"mtime":1608807036475,"results":"86","hashOfConfig":"85"},{"size":1344,"mtime":1621229892905,"results":"87","hashOfConfig":"85"},{"size":6067,"mtime":1628685375138,"results":"88","hashOfConfig":"85"},{"size":305,"mtime":1609329075943,"results":"89","hashOfConfig":"85"},{"size":417,"mtime":1609572405860,"results":"90","hashOfConfig":"85"},{"size":434,"mtime":1609567803133,"results":"91","hashOfConfig":"85"},{"size":2704,"mtime":1620815941434,"results":"92","hashOfConfig":"85"},{"size":1485,"mtime":1610103748243,"results":"93","hashOfConfig":"85"},{"size":9154,"mtime":1628948435734,"results":"94","hashOfConfig":"85"},{"size":9703,"mtime":1627975406766,"results":"95","hashOfConfig":"85"},{"size":3732,"mtime":1628920243524,"results":"96","hashOfConfig":"85"},{"size":2051,"mtime":1620842346845,"results":"97","hashOfConfig":"85"},{"size":1771,"mtime":1609567740608,"results":"98","hashOfConfig":"85"},{"size":523,"mtime":1609494269801,"results":"99","hashOfConfig":"85"},{"size":1629,"mtime":1621227889475,"results":"100","hashOfConfig":"85"},{"size":13289,"mtime":1620841518130,"results":"101","hashOfConfig":"85"},{"size":191,"mtime":1609400442411,"results":"102","hashOfConfig":"85"},{"size":4099,"mtime":1627977411060,"results":"103","hashOfConfig":"85"},{"size":1009,"mtime":1609567608402,"results":"104","hashOfConfig":"85"},{"size":1515,"mtime":1609567870457,"results":"105","hashOfConfig":"85"},{"size":2810,"mtime":1620838687504,"results":"106","hashOfConfig":"85"},{"size":1697,"mtime":1609567877776,"results":"107","hashOfConfig":"85"},{"size":436,"mtime":1627813568947,"results":"108","hashOfConfig":"85"},{"size":3817,"mtime":1628948134079,"results":"109","hashOfConfig":"85"},{"size":678,"mtime":1620892577973,"results":"110","hashOfConfig":"85"},{"size":212,"mtime":1628942563377,"results":"111","hashOfConfig":"85"},{"size":422,"mtime":1621054601297,"results":"112","hashOfConfig":"85"},{"size":2515,"mtime":1629871659608,"results":"113","hashOfConfig":"85"},{"size":1313,"mtime":1629803174017,"results":"114","hashOfConfig":"85"},{"size":2154,"mtime":1621251152947,"results":"115","hashOfConfig":"85"},{"size":514,"mtime":1621227892556,"results":"116","hashOfConfig":"85"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"119"},"1cxq667",{"filePath":"120","messages":"121","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"119"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"119"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"127","messages":"128","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"119"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"119"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"119"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"119"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"119"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"119"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"119"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"119"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"119"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"119"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"119"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"119"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"119"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"164","messages":"165","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"119"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"119"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"119"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"119"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"119"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180","usedDeprecatedRules":"119"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"183"},"1ro0t8w",{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"183"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"183"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"191","usedDeprecatedRules":"183"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"183"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"183"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"183"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"200","usedDeprecatedRules":"183"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"203","usedDeprecatedRules":"183"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"206","usedDeprecatedRules":"183"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"209","usedDeprecatedRules":"183"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"212","usedDeprecatedRules":"183"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"215","usedDeprecatedRules":"183"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"183"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"183"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"183"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":2,"source":"224","usedDeprecatedRules":"183"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"183"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"183"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"183"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"183"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"235","usedDeprecatedRules":"183"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"183"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"183"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":2,"source":"242","usedDeprecatedRules":"183"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"245"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"183"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"183"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"252","messages":"253","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"254","messages":"255","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"256","usedDeprecatedRules":"183"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"183"},"E:\\Projects\\Upsolve\\upsolve\\src\\index.js",[],["259","260"],"E:\\Projects\\Upsolve\\upsolve\\src\\App.js",["261"],"import './App.css';\r\nimport {BrowserRouter as Router, Link, Route, Switch} from 'react-router-dom';\r\nimport LeaderboardPage from './Leaderboard/LeaderboardPage';\r\nimport Challenge from './Challenge/Challenge'\r\nimport LoginPage from './loginPage';\r\nimport HomePage from './HomePage';\r\nimport LogoutPage from './LogoutPage';\r\nimport ErrorPage from './ErroPage';\r\nimport ProfileRoute from './Profile/ProfileRoute';\r\nimport RegisterPage from './RegisterPage';\r\n\r\nfunction App() {\r\n\r\n    return(\r\n        <Router>\r\n            <Switch>\r\n                <Route exact path=\"/leaderboard\" component={LeaderboardPage}></Route>\r\n                <Route exact path=\"/challenge\" component={Challenge}></Route>\r\n                <Route exact path=\"/login\" component={LoginPage}></Route>\r\n                <Route exact path=\"/register\" component={RegisterPage}></Route>\r\n                <Route exact path=\"/logout\" component={LogoutPage}></Route>\r\n                <Route exact path=\"/profile/:username\" component={ProfileRoute}></Route>\r\n                <Route exact path=\"/\" component={HomePage}></Route>\r\n                <Route component={ErrorPage}></Route>\r\n            </Switch>\r\n        </Router>\r\n    );\r\n\r\n\r\n}\r\n\r\nexport default App;\r\n","E:\\Projects\\Upsolve\\upsolve\\src\\reportWebVitals.js",[],"E:\\Projects\\Upsolve\\upsolve\\src\\loginPage.js",["262","263"],"E:\\Projects\\Upsolve\\upsolve\\src\\HomePage.js",["264","265"],"import React, { useEffect,useState } from 'react';\r\nimport {Profile} from './Api/problem.api'\r\n\r\nfunction HomePage() {\r\n    const [user,setuser] = useState(\"\");\r\n    useEffect(()=>{\r\n        \r\n    },[])\r\n    return(\r\n        <div>\r\n            {JSON.stringify(user)}\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default HomePage;","E:\\Projects\\Upsolve\\upsolve\\src\\LogoutPage.js",["266"],"import React, { useEffect,useState } from 'react';\r\n\r\n\r\nfunction LogoutPage() {\r\n    \r\n    useEffect(()=>{\r\n        window.localStorage.setItem(\"token\",null);\r\n        window.location = \"/login\"\r\n    },[])\r\n    return(\r\n        <div>\r\n            \r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default LogoutPage;","E:\\Projects\\Upsolve\\upsolve\\src\\ErroPage.js",[],"E:\\Projects\\Upsolve\\upsolve\\src\\RegisterPage.js",["267","268","269","270","271"],"\r\nimport fetch from 'node-fetch';\r\nimport React, { useState } from 'react';\r\nimport {getUserByname} from './Api/problem.api'\r\nimport NavigationMenu from './NavigationMenu';\r\nimport BoxTitle from './BoxTitile';\r\n\r\n\r\n\r\n    \r\n\r\n\r\n\r\nfunction RegisterPage() {\r\n    \r\n    \r\n    const [isloading,setisLoading] = useState(false);\r\n    const [Error,setError] = useState(\"\");\r\n    const [username,setusername] = useState(\"\");\r\n    const [password,setpassword] = useState(\"\");\r\n    const [confirmpassword,setconfirmpassword] = useState(\"\");\r\n    const [country,setcountry] = useState(\"\");\r\n    const [institution,setinstitution] = useState(\"\");\r\n    const [bio,setbio] = useState(\"\");\r\n    const [validatePassword,setvalidatePassword] = useState(\"Please fill out this field\");\r\n    \r\n    let checkPassword = (e) => {\r\n        let psw = e.target.value;\r\n\r\n        if(psw.length < 8){\r\n            setvalidatePassword(\"Atleast 8 characters required\");\r\n            return;\r\n        }\r\n\r\n        if(!psw.match(/[a-z]/g)){\r\n            setvalidatePassword(\"Lowercase character is required\");\r\n            return;\r\n        }\r\n\r\n        if(!psw.match(/[A-Z]/g)){\r\n            setvalidatePassword(\"Uppercase character is required\");\r\n            return;\r\n        }\r\n\r\n        if(!psw.match(/[0-9]/g)){\r\n            setvalidatePassword(\"A digit is required\");\r\n            return;\r\n        }\r\n\r\n        if(!psw.match(/[!\"#$%&'()*+,-.:;<=>?@[\\]^_`{|}~]/)){\r\n            setvalidatePassword(\"Special character is required\");\r\n            return;\r\n        }\r\n        setvalidatePassword(true);\r\n    }\r\n\r\n    return(\r\n\r\n        \r\n        <div>\r\n\r\n            <NavigationMenu></NavigationMenu>\r\n            \r\n            {Error !== \"\" ? \r\n            <div className=\"alert-heading text-center p-1 m-auto bg-danger text-light alert-animation\" style={{width: \"30%\",borderRadius: \"5px\",\"fontSize\": \"1.2rem\"}}>\r\n                {Error}\r\n            </div> \r\n            \r\n            : ''}\r\n\r\n            <div className=\"box\">\r\n                <BoxTitle title=\"Register\"></BoxTitle>\r\n                \r\n                <div className={\"box-content-dimension mb-5\"+ (isloading ? \" loading\" : \"\")}>\r\n                    <div className=\"box-form p-4\">\r\n                        \r\n                            <div class=\"form-group\">\r\n                                <label>Username:</label>\r\n                                <input type=\"text\" className=\"form-control\" placeholder=\"Enter codeForces Handle\" onChange={(e) => {setusername(e.target.value)}} required />\r\n                                {username === \"\" ? <div class=\"text-danger\">Please fill out this field.</div> : ''}\r\n                            </div>\r\n                            <div class=\"form-group\">\r\n                                <label>Country: <select onChange={(e) => {setcountry(e.target.value)}}>\r\n                                                    <option value=\"India\">India</option>\r\n                                                </select>\r\n                                </label>\r\n                                \r\n                            </div>\r\n                            <div class=\"form-group\">\r\n                                <label>Institution: <select onChange={(e) => {setinstitution(e.target.value)}}>\r\n                                                    <option value=\"India\">India</option>\r\n                                                </select>\r\n                                </label>\r\n                                \r\n                            </div>\r\n                            <div class=\"form-group\">\r\n                                <label>Password:</label>\r\n                                <input type=\"password\" class=\"form-control\" onChange={(e) => {setpassword(e.target.value);checkPassword(e)}} placeholder=\"Enter password\" required />\r\n                                {validatePassword !== true ? <div class=\"text-danger\">{validatePassword}</div> : ''}\r\n                            </div>\r\n                            <div class=\"form-group\">\r\n                                <label>Confirm Password:</label>\r\n                                <input type=\"password\" class=\"form-control\" onChange={(e) => {setconfirmpassword(e.target.value)}} placeholder=\"Confrim Password\" required />\r\n                                {confirmpassword === \"\" ? <div className=\"text-danger\">Please fill out this field.</div> : (confirmpassword !== password ? <div className=\"text-danger\">Should match the password</div> : '')}\r\n                                {}\r\n                            </div>\r\n                            \r\n                        \r\n                    </div>\r\n                    <button type=\"submit\" className=\"shadow\" onClick={async () => {\r\n                                if(validatePassword !== true || username === \"\" || password !== confirmpassword){return}\r\n                                setisLoading(true);\r\n                                let result = await getUserByname(username);\r\n                                console.log(result);\r\n                                if(!result || result === false){\r\n                                    // generate opt\r\n                                }\r\n                                else{\r\n                                    setisLoading(false);\r\n                                    setError(\"User name already exists\");\r\n                                    \r\n\r\n                                    setTimeout(() => {\r\n                                        setError(\"\");\r\n                                    },5000)\r\n                                    return;\r\n                                }\r\n                            }}>{isloading ? \"Loading...\" : \"Next\"}</button>\r\n                </div>\r\n                \r\n            </div>\r\n\r\n            \r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RegisterPage;","E:\\Projects\\Upsolve\\upsolve\\src\\Leaderboard\\LeaderboardPage.js",["272","273"],"\r\nimport { useEffect, useState } from 'react';\r\nimport '../App.css';\r\nimport Leaderboard from './leaderboard';\r\n\r\nimport Skeleton from '@material-ui/lab/Skeleton'\r\nimport NavigationMenu from '../NavigationMenu';\r\n\r\nfunction LeaderboardPage() {\r\n    const country_list = require('country-list');\r\n    const [filter,setfilter] = useState({country:'',institution: '',username:''});\r\n    let countries = [];\r\n    country_list.getNames().map((country) => {\r\n        countries.push(<option value={country}>{country}</option>)\r\n    })\r\n    \r\n    \r\n  return (\r\n    <div className=\"App\">\r\n        \r\n        {<NavigationMenu></NavigationMenu> || <Skeleton width=\"100%\" height=\"2rem\"></Skeleton>}\r\n        <section class=\"Leaderboard\">\r\n\r\n                <div class=\"container-fluid leaderboard-container col-lg-8 col-md-6 col-11\">\r\n                    <div class=\"leaderboard-title\">\r\n                        <p>Leaderboard</p>\r\n                    </div>\r\n                    <div class=\"leaderboard-table\">\r\n                        \r\n                    <Leaderboard filter={filter} /> \r\n                        \r\n                        \r\n\r\n                        \r\n                    </div>\r\n                </div>\r\n                <div class=\"container-fluid col-lg-3 col-md-4 col-11 filters\">\r\n                    <div class=\"filter-title\">\r\n                        <p>Filter</p>\r\n                    </div>\r\n                    <div class=\"filter-form row\">\r\n                        <form action=\"#\">\r\n                            <label for=\"country\">Country: </label>\r\n                            <select name=\"country\" onChange={(e)=> {setfilter({...filter,country:e.target.value})}} class=\"col-7\" id=\"country\">\r\n                                <option value=\"\">Any</option>\r\n                                {countries}\r\n                            </select>\r\n                            <label for=\"institution\">Institution: </label>\r\n                            <select name=\"institution\" onChange={(e)=> {setfilter({...filter,institution:e.target.value})}} class=\"col-7\" id=\"institution\">\r\n                                <option value=\"\"></option>\r\n                                <option value=\"India\">India</option>\r\n                                <option value=\"India\">India</option>\r\n                            </select>\r\n                            <label for=\"username\">Username: </label>\r\n                            <input type=\"text\" name=\"username\" onChange={(e)=> {setfilter({...filter,username:e.target.value})}} class=\"col-7\" id=\"username\"/>\r\n                            {/* <input type=\"submit\" class=\"btn-primary\" value=\"Submit\"/> */}\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n        \r\n        </section>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LeaderboardPage;\r\n","E:\\Projects\\Upsolve\\upsolve\\src\\Challenge\\Challenge.js",[],"E:\\Projects\\Upsolve\\upsolve\\src\\Profile\\ProfileRoute.js",["274","275"],"import React, { useEffect, useState } from 'react'\r\nimport NavigationMenu from '../NavigationMenu'\r\nimport {getUserByname} from '../Api/problem.api';\r\nimport ProfilePage from './ProfilePage'\r\n\r\nfunction ProfileRoute(props) {\r\n    \r\n    const [user,setuser] = useState({});\r\n    const paramUsername = props.match.params.username;\r\n    \r\n    \r\n\r\n    useEffect(async () => {\r\n        if(paramUsername === undefined){\r\n        \r\n            window.location = '/error';\r\n            \r\n            \r\n        }\r\n        \r\n        getUserByname(paramUsername).then((User) => {\r\n            if(!User){\r\n                console.log(User);\r\n                window.location = '/error';\r\n                return;\r\n            }\r\n            else{\r\n                console.log(User);\r\n                setuser(User);\r\n            }\r\n        })\r\n        \r\n        \r\n    },[])\r\n    \r\n    \r\n    \r\n    return (\r\n        <div>\r\n           <NavigationMenu></NavigationMenu> \r\n           {user._id ? <ProfilePage user={user}></ProfilePage> : <></>}\r\n        </div>\r\n    )\r\n}\r\nexport default ProfileRoute;","E:\\Projects\\Upsolve\\upsolve\\src\\NavigationMenu.js",["276","277","278"],"import React,{useState,useEffect} from 'react';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport {logout,TokenAuthentication} from './Api/auth.api';\r\nfunction NavigationMenu() {\r\n\r\n    const [status,setstatus] = useState(false);\r\n    const [payload,setpayload] =useState({});\r\n    useEffect(()=>{\r\n        let payload = TokenAuthentication();\r\n        if(payload){\r\n            setstatus(true);\r\n            setpayload(payload)\r\n        }\r\n    },[])\r\n    return (\r\n        <section class=\"navigation-menu\">\r\n            <div class=\"nav-bar col-12\">\r\n                <p class=\"text-center\">Upsolve</p>\r\n                <div class=\"nav-items col-lg-3 col-6 text-center\">\r\n                    <a href=\"#\" class=\"back-btn\" >\r\n                        <Tooltip title=\"Back\" arrow>\r\n                            <div>\r\n                                <i class=\"fa fa-rocket\"></i>\r\n                            </div>\r\n                        </Tooltip>\r\n                    </a>\r\n                    <a href=\"#\" data-toogle=\"tooltip\" data-palcement=\"bottom\" title={status ? payload?.username : \"Login/Register\"}>\r\n                        <Tooltip title={status ? payload?.username : \"Login/Register\"} arrow>\r\n                            <div>\r\n                                <i class=\"fa fa-user\"></i>\r\n                            </div>\r\n                        </Tooltip>\r\n                    </a>\r\n                    <a href=\"#\" data-toogle=\"tooltip\" data-palcement=\"bottom\" title=\"Logout\">\r\n                        <Tooltip title=\"Logout\" arrow>\r\n                            <div onClick={() => {logout()}}>\r\n                                <i class=\"fa fa-sign-out\"></i>\r\n                            </div>\r\n                        </Tooltip>\r\n                    </a>\r\n                </div>\r\n            </div>\r\n        </section>\r\n    );\r\n}\r\n\r\nexport default NavigationMenu;\r\n","E:\\Projects\\Upsolve\\upsolve\\src\\BoxTitile.js",[],"E:\\Projects\\Upsolve\\upsolve\\src\\Leaderboard\\leaderboard.js",["279","280"],"import {useState,useEffect} from 'react'; \r\nimport Entry from './entry';\r\nimport Skeleton from '@material-ui/lab/Skeleton';\r\nimport Paginate from 'react-paginate';\r\nimport {LeaderboardList} from '../Api/problem.api';\r\n\r\nfunction Leaderboard(props) {\r\n\r\n    \r\n\r\n    \r\n    const [items,setItems] = useState([]);\r\n    const [skip,setskip] = useState(1);\r\n    const [limit,setlimit] = useState(2);\r\n    const [count,setcount] = useState(0);\r\n    const [loading,setloading] = useState(true);\r\n    const filter = props.filter;\r\n    useEffect(()=>{\r\n        setskip(1);\r\n    },[filter])\r\n    useEffect(()=>{\r\n        setloading(true);\r\n        LeaderboardList(skip,limit,filter).then((result)=>{\r\n            setloading(false);\r\n            setItems(result.data);\r\n            setcount(result.count);\r\n        })  \r\n    },[skip,limit,filter]);\r\n\r\n\r\n    \r\n    var board = [];\r\n    \r\n    if(loading){\r\n        board.push(<Skeleton variant=\"rect\" width=\"100%\" height={40}></Skeleton>);\r\n        board.push(<Skeleton variant=\"rect\" width=\"100%\" height={40}></Skeleton>);\r\n        board.push(<Skeleton variant=\"rect\" width=\"100%\" height={40}></Skeleton>);\r\n        board.push(<Skeleton variant=\"rect\" width=\"100%\" height={40}></Skeleton>);\r\n        board.push(<Skeleton variant=\"rect\" width=\"100%\" height={40}></Skeleton>);\r\n        return board;\r\n    }\r\n\r\n    if(!items || items.length == 0){\r\n        board.push(<h1 style={{color: \"Orange\"}}>!! No User found !!</h1>);\r\n        return board;\r\n    }\r\n    // console.log(items);\r\n    items.forEach((el,i) => {\r\n        board.push(<Entry offset={(skip-1)*limit} id={i} name={el.username} streak={el.streak} />);\r\n    })\r\n    board.push(\r\n            \r\n            <Paginate containerClassName=\"paginate\" pageCount={Math.ceil(count/limit)} pageRangeDisplayed={5} marginPagesDisplayed={3} initialPage={skip - 1} previousLabel=\"<<\" nextLabel=\">>\" activeClassName=\"active-page\" onPageChange={(e)=>{setskip((e.selected) + 1)}}></Paginate>\r\n\r\n            \r\n        )\r\n    return board;\r\n}\r\n\r\nexport default Leaderboard;","E:\\Projects\\Upsolve\\upsolve\\src\\Api\\problem.api.js",[],"E:\\Projects\\Upsolve\\upsolve\\src\\Api\\auth.api.js",["281"],"E:\\Projects\\Upsolve\\upsolve\\src\\Challenge\\ChallengeContent.js",[],"E:\\Projects\\Upsolve\\upsolve\\src\\authGaurd.js",[],"E:\\Projects\\Upsolve\\upsolve\\src\\Profile\\ProfilePage.js",["282","283","284","285","286","287","288","289","290","291","292","293"],"E:\\Projects\\Upsolve\\upsolve\\src\\Leaderboard\\entry.js",["294"],"import React from 'react';\r\nimport { CircularProgressbar } from 'react-circular-progressbar';\r\nimport 'react-circular-progressbar/dist/styles.css';\r\nexport default class Entry extends React.Component{\r\n\r\n    \r\n    render(){\r\n        let id = \"table\"+this.props.id;\r\n        let percentage = parseInt((this.props.streak/30)*100);\r\n        \r\n        return(\r\n            <div class=\"entry shadow\">\r\n                \r\n                <div class=\"rank\">{this.props.id + parseInt(this.props.offset) + 1} </div>\r\n                <div class=\"names\">{this.props.name}</div>\r\n                <CircularProgressbar className=\"PB\"\r\n  value={percentage}\r\n  text={this.props.streak}\r\n  styles={{\r\n    // Customize the root svg element\r\n    root: {},\r\n    // Customize the path, i.e. the \"completed progress\"\r\n    path: {\r\n      // Path color\r\n      stroke: 'linear-gradient(#0052D4, #4364F7, #6FB1FC)',\r\n      // Whether to use rounded or flat corners on the ends - can use 'butt' or 'round'\r\n      strokeLinecap: 'butt',\r\n      // Customize transition animation\r\n      transition: 'stroke-dashoffset 0.5s ease 0s',\r\n      // Rotate the path\r\n    //   transform: 'rotate(0.25turn)',\r\n      transformOrigin: 'center center',\r\n    },\r\n    // Customize the circle behind the path, i.e. the \"total progress\"\r\n    trail: {\r\n      // Trail color\r\n      stroke: '#d6d6d6',\r\n      // Whether to use rounded or flat corners on the ends - can use 'butt' or 'round'\r\n      strokeLinecap: 'butt',\r\n      // Rotate the trail\r\n    //   transform: 'rotate(0.25turn)',\r\n      transformOrigin: 'center center',\r\n    },\r\n    // Customize the text\r\n    text: {\r\n      // Text color\r\n      fill: 'linear-gradient(#0052D4, #4364F7, #6FB1FC)',\r\n      // Text size\r\n      fontSize: '2rem',\r\n      fontWeight: '800'\r\n    },\r\n    // Customize background - only used when the `background` prop is true\r\n    background: {\r\n      fill: 'transparent',\r\n    },\r\n  }}\r\n/>\r\n                    \r\n                \r\n            </div>\r\n        )\r\n    }\r\n};","E:\\Projects\\Upsolve\\upsolve\\src\\Challenge\\ChallengeTimer.js",[],"E:\\Projects\\Upsolve\\upsolve\\src\\Challenge\\ChallengeDailyQues.js",["295"],"import React from 'react';\r\nimport ProblemCardTitle from './ProblemCardTitle'\r\nimport ProblemDescription from './ProblemDescription'\r\nimport  { useEffect, useState } from 'react';\r\nimport {dailyQuestion,getUser} from '../Api/problem.api';\r\nfunction ChallengeDailyQues(props) {\r\n\r\n    const [problem,setproblem] = useState({\r\n        name: \"\",\r\n        contestId: \"\",\r\n        index: \"\",\r\n        link: \"\",\r\n        rating: \"\",\r\n    });\r\n    const [solved,setsolved] = useState(\"\");\r\n    getUser(props.payload._id).then((user) => {setsolved(user.dailyQuestion)})\r\n    const [problemError,setproblemError] = useState(null);\r\n    useEffect(()=>{\r\n        if(!solved && solved !== \"\"){\r\n            dailyQuestion(props).then((problem)=>{\r\n                if(problem === false){\r\n                    setproblemError(\"Unable to fetch the Problem\")\r\n                    \r\n                }\r\n                else{\r\n                    setproblem(problem);\r\n                    setproblemError(null);\r\n                }\r\n            })\r\n        }\r\n    },[problemError,solved])\r\n    return(\r\n\r\n        <div className=\"dailyques-section\">\r\n            \r\n            <ProblemCardTitle solved={solved} title=\"Daily Question\"></ProblemCardTitle>\r\n            <ProblemDescription payload={props.payload} problem={problem} Error={problemError} refresh={() => {setproblemError(null)}} solved={solved} updatesolved={(result)=> {setsolved(result)}}></ProblemDescription>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChallengeDailyQues;","E:\\Projects\\Upsolve\\upsolve\\src\\Challenge\\ChallengeUpsolveQues.js",["296","297"],"import Skeleton from '@material-ui/lab/Skeleton';\r\nimport React, { useEffect, useState } from 'react';\r\nimport ProblemCardTitle from './ProblemCardTitle'\r\nimport ProblemDescription from './ProblemDescription'\r\nimport {UpsolveQuestion,getUser} from '../Api/problem.api'\r\n\r\nfunction ChallengeUpsolveQues(props) {\r\n\r\n    const [problem,setproblem] = useState({\r\n        name: \"\",\r\n        contestId: \"\",\r\n        index: \"\",\r\n        link: \"\",\r\n        rating: \"\",\r\n    });\r\n    \r\n    const [upsolve,setupsolve] = useState(-1);\r\n    getUser(props.payload._id).then((user) => {setupsolve(user.UpsolveQuestion)})\r\n    const [problemError,setproblemError] = useState(null);\r\n    useEffect(()=>{\r\n        if(upsolve >= 0){\r\n            UpsolveQuestion(props).then((problem)=>{\r\n                \r\n                if(problem === false){\r\n                    setproblemError(\"Unable to fetch the Problem\")\r\n                    \r\n                }\r\n                else{\r\n                    setproblem(problem);\r\n                    setproblemError(null);\r\n                }\r\n            });\r\n        }\r\n    },[problemError,upsolve])\r\n    return(\r\n        \r\n           <div className=\"Upsolveques-section\">\r\n                \r\n                <ProblemCardTitle upsolve={Math.max(0,upsolve)} title=\"Upsolve Question\"></ProblemCardTitle>\r\n                <ProblemDescription payload={props.payload} problem={problem} Error={problemError} refresh={() => {setproblemError(null)}} solved={false} upsolve={upsolve} updateupsolve={(result)=> {setupsolve(upsolve + 1);setproblemError(null)}}></ProblemDescription>\r\n            </div>\r\n            \r\n        \r\n        \r\n    )\r\n}\r\n\r\nexport default ChallengeUpsolveQues;","E:\\Projects\\Upsolve\\upsolve\\src\\Challenge\\ProblemDescription.js",["298","299","300","301"],"import Skeleton from '@material-ui/lab/Skeleton';\r\nimport fetch from 'node-fetch';\r\nimport React, { useEffect,useState } from 'react';\r\nimport {Check} from '../Api/problem.api';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\n\r\nfunction ProblemDescription(props) {\r\n\r\n    const [checking,setchecking] = useState(false);\r\n\r\n    let CheckProblem = () =>{\r\n        setchecking(true);\r\n        \r\n        Check(props,props.upsolve!==undefined ? \"upsolve\" : \"daily\").then((result) => {\r\n            setchecking(false);\r\n            \r\n            if(result === true){\r\n                props.upsolve===undefined ? props.updatesolved(true) : props.updateupsolve(true);\r\n            }\r\n        })\r\n    }\r\n    \r\n    return(\r\n        props.Error===null ?\r\n            !props.solved ?\r\n            (props.problem?.name ? \r\n            <div className=\"problem-description\">\r\n                <div className=\"description\">\r\n                    <label>Problem: </label>\r\n                    <a href={props.problem?.link} target=\"_blank\">{props.problem?.name}</a>\r\n                    <label>ContestID: </label>\r\n                    <a href={\"https://codeforces.com/contest/\"+props.problem?.contestId} target=\"_blank\">{props.problem?.contestId}</a>\r\n                    <label>Rating: </label>\r\n                    <p>{props.problem?.rating}</p>\r\n                </div>\r\n                <button className=\"shadow\" onClick={CheckProblem} disabled={checking}>{checking?\"Checking...\":\"Check\"}</button>\r\n  \r\n            </div>\r\n            :\r\n            <div style={{width:\"100%\"}}>\r\n                <Skeleton width=\"78%\" height=\"3rem\" style={{margin:\"0.7rem auto\",color:\"grey\",borderRadius:\"999px\"}}></Skeleton>\r\n                <Skeleton width=\"78%\" height=\"3rem\" style={{margin:\"0 auto 0.7rem auto\",color:\"grey\",borderRadius:\"999px\"}}></Skeleton>\r\n                <Skeleton width=\"78%\" height=\"3rem\" style={{margin:\"0 auto 0.7rem auto\",color:\"grey\",borderRadius:\"999px\"}}></Skeleton>\r\n                <Skeleton width=\"78%\" height=\"3rem\" style={{margin:\"0 auto 0.7rem auto\",color:\"grey\",borderRadius:\"999px\"}}></Skeleton>\r\n            </div>)\r\n            :\r\n            (\r\n                <div className=\"problem-description\">\r\n                    <h1>Solve More upsolve questions</h1>\r\n                </div>\r\n            ) \r\n        :\r\n        (\r\n            <div className=\"problem-description\">\r\n                <h1>{props.Error} <Tooltip title=\"Refresh\" arrow><i className=\"fa fa-refresh\" role=\"button\" onClick={() => {props.refresh()}}></i></Tooltip></h1>\r\n            </div>\r\n        )   \r\n    )\r\n}\r\n\r\nexport default ProblemDescription;","E:\\Projects\\Upsolve\\upsolve\\src\\Challenge\\ProblemCardTitle.js",["302"],"import { PromiseProvider } from 'mongoose';\r\nimport React from 'react';\r\n\r\nfunction ProblemCardTitle(props) {\r\n    \r\n    return(\r\n        \r\n        <div className=\"problem-card-title\">\r\n            <div className=\"checkmark-circle\">\r\n                {props.upsolve===undefined ? <div className={props.solved ?\"checkmark draw\":\"\"}></div> : <p>{props.upsolve}</p>}\r\n            </div>\r\n            <h1>{props.title}</h1>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ProblemCardTitle;","C:\\Users\\yash\\Documents\\Projects\\CodeForces\\Upsolve\\upsolve\\src\\index.js",[],["303","304"],"C:\\Users\\yash\\Documents\\Projects\\CodeForces\\Upsolve\\upsolve\\src\\reportWebVitals.js",[],"C:\\Users\\yash\\Documents\\Projects\\CodeForces\\Upsolve\\upsolve\\src\\App.js",["305"],"import './style.css';\r\nimport {BrowserRouter as Router, Link, Route, Switch} from 'react-router-dom';\r\nimport LeaderboardPage from './Leaderboard/LeaderboardPage';\r\nimport Challenge from './Challenge/Challenge'\r\nimport LoginPage from './loginPage';\r\nimport HomePage from './HomePage';\r\nimport LogoutPage from './LogoutPage';\r\nimport ErrorPage from './ErroPage';\r\nimport ProfileRoute from './Profile/ProfileRoute';\r\nimport RegisterPage from './RegisterPage';\r\nimport AboutPage from './About/AboutPage';\r\n\r\nfunction App() {\r\n    return(\r\n        <Router>\r\n            <Switch>\r\n                <Route exact path=\"/leaderboard\" component={LeaderboardPage}></Route>\r\n                <Route exact path=\"/challenge\" component={Challenge}></Route>\r\n                <Route exact path=\"/login\" component={LoginPage}></Route>\r\n                <Route exact path=\"/register\" component={RegisterPage}></Route>\r\n                <Route exact path=\"/logout\" component={LogoutPage}></Route>\r\n                <Route exact path=\"/about\" component={AboutPage}></Route>\r\n                <Route exact path=\"/profile/:username\" component={ProfileRoute}></Route>\r\n                <Route exact path=\"/\" component={HomePage}></Route>\r\n                <Route component={ErrorPage}></Route>\r\n            </Switch>\r\n        </Router>\r\n    );\r\n\r\n\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\yash\\Documents\\Projects\\CodeForces\\Upsolve\\upsolve\\src\\HomePage.js",["306"],"import React, { useRef, Suspense } from 'react';\r\nimport {Canvas,useFrame,useLoader} from 'react-three-fiber';\r\nimport {OrbitControls,Stars} from '@react-three/drei';\r\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\r\n\r\n\r\nlet radius = 500;\r\nconst Leaderboard = ({position}) => {\r\n    const mesh = useRef();\r\n    let i = {\r\n        current: 1200\r\n    }\r\n    useFrame(() => {\r\n        mesh.current.rotation.y -= 0.01;\r\n        mesh.current.position.x = (radius * Math.cos(2 * Math.PI * (i.current) / 1200)) ;\r\n        mesh.current.position.z = (radius * Math.sin(2 * Math.PI * (i.current) / 1200)) - 100 ;\r\n        i.current--;\r\n        if(i.current<1){\r\n            i.current=1200\r\n        }\r\n    })\r\n    // useFrame(() => {mesh.current})\r\n    const gltf = useLoader(GLTFLoader, \"Leaderboard.glb\");\r\n    return <mesh onPointerOver={() => document.body.style.cursor = \"pointer\"} onPointerOut={() => document.body.style.cursor = \"default\"} onClick={() => {window.location=\"/leaderboard\"}} onPointerDown={() => {window.location=\"/leaderboard\"}}><primitive ref={mesh} object={gltf.scene} scale={[2,2,2]} position={position} /></mesh>\r\n  };\r\nconst Challenge = ({position}) => {\r\n    const mesh = useRef();\r\n    let i = {\r\n        current: 600\r\n    }\r\n    useFrame(() => {\r\n        mesh.current.rotation.y -= 0.01;\r\n        mesh.current.position.x = (radius * Math.cos(2 * Math.PI * (i.current) / 1200)) ;\r\n        mesh.current.position.z = (radius * Math.sin(2 * Math.PI * (i.current) / 1200)) - 100 ;\r\n        i.current--;\r\n        if(i.current<1){\r\n            i.current=1200\r\n        }\r\n    })\r\n    // useFrame(() => {mesh.current})\r\n    const gltf = useLoader(GLTFLoader, \"challenge.glb\");\r\n    return <mesh onPointerOver={() => document.body.style.cursor = \"pointer\"} onPointerOut={() => document.body.style.cursor = \"default\"} onClick={() => {window.location=\"/challenge\"}} onPointerDown={() => {window.location=\"/challenge\"}}><primitive ref={mesh} object={gltf.scene} scale={[2,2,2]} position={position} /></mesh>\r\n  };\r\nconst About = ({position}) => {\r\n    const mesh = useRef();\r\n    let i = {\r\n        current: 300\r\n    }\r\n    useFrame(() => {\r\n        mesh.current.rotation.y -= 0.01;\r\n        mesh.current.position.x = (radius * Math.cos(2 * Math.PI * (i.current) / 1200)) ;\r\n        mesh.current.position.z = (radius * Math.sin(2 * Math.PI * (i.current) / 1200)) - 100 ;\r\n        i.current--;\r\n        if(i.current<1){\r\n            i.current=1200\r\n        }\r\n    })\r\n    // useFrame(() => {mesh.current})\r\n    const gltf = useLoader(GLTFLoader, \"about.glb\");\r\n    return <mesh onPointerOver={() => document.body.style.cursor = \"pointer\"} onPointerOut={() => document.body.style.cursor = \"default\"} onClick={() => {window.location=\"/about\"}} onPointerDown={() => {window.location=\"/about\"}}><primitive ref={mesh} object={gltf.scene} scale={[2,2,2]} position={position} /></mesh>\r\n  };\r\n  const Profile = ({position}) => {\r\n    const mesh = useRef();\r\n    let i = {\r\n        current: 900\r\n    }\r\n    useFrame(() => {\r\n        mesh.current.rotation.y -= 0.01;\r\n        mesh.current.position.x = (radius * Math.cos(2 * Math.PI * (i.current) / 1200)) ;\r\n        mesh.current.position.z = (radius * Math.sin(2 * Math.PI * (i.current) / 1200)) - 100 ;\r\n        i.current--;\r\n        if(i.current<1){\r\n            i.current=1200\r\n        }\r\n    })\r\n    // useFrame(() => {mesh.current})\r\n    const gltf = useLoader(GLTFLoader, \"Profile.glb\");\r\n    return <mesh onPointerOver={() => document.body.style.cursor = \"pointer\"} onPointerOut={() => document.body.style.cursor = \"default\"} onClick={() => {window.location=\"/login\"}} onPointerDown={() => {window.location=\"/login\"}}><primitive ref={mesh} object={gltf.scene} scale={[2,2,2]} position={position} /></mesh>\r\n  };\r\n\r\nfunction UpsolveText(){\r\n    const mesh = useRef();  \r\n    // useFrame(()=>{ mesh.current.rotation.x=-300})\r\n    const gltf = useLoader(GLTFLoader, \"UpsolveText.glb\");\r\n    return <mesh onPointerOver={() => document.body.style.cursor = \"pointer\"} onPointerOut={() => document.body.style.cursor = \"default\"} onClick={() => {window.location=\"/\"}} onPointerDown={() => {window.location=\"/\"}}><primitive ref={mesh} object={gltf.scene} scale={[3,3,3]} position={[0,10,0]} /></mesh>\r\n}\r\n  \r\n\r\n\r\n\r\nfunction HomePage() {\r\n\r\n    \r\n\r\n\r\n    return(\r\n        <>\r\n        <Canvas \r\n            className=\"canvas\"\r\n            style={{width: window.innerWidth,height: window.innerHeight,minWidth: \"100vw\",minHeight: \"100vh\"}}\r\n            colorManagement\r\n            shadowMap\r\n            camera = {{position: [10,300,800], fov: 100,far:5000}}\r\n            pixelRatio={Math.min(2,  1)}\r\n\r\n        >\r\n            <ambientLight intensity={0.3}></ambientLight>\r\n            <directionalLight\r\n                position={[0,-10,10]}\r\n                intensity={1.5}\r\n            ></directionalLight>\r\n            <pointLight position={[-10,0,-20]} intensity={0.5}></pointLight>\r\n            <pointLight position={[0,-10,0]} intensity={1.5}></pointLight>\r\n            <group>\r\n                <Suspense fallback={null}>\r\n                    <UpsolveText></UpsolveText>\r\n                    <Leaderboard position={[radius * Math.cos(2 * Math.PI * (1200) / 1200),-20,radius * Math.sin(2 * Math.PI * (1200) / 1200) - 100]} />\r\n                    \r\n                    {/* <Profile position={[radius * Math.cos(2 * Math.PI * (900) / 1200),0,radius * Math.sin(2 * Math.PI * (900) / 1200) - 100]} /> */}\r\n                    <Challenge position={[radius * Math.cos(2 * Math.PI * (600) / 1200),-20,radius * Math.sin(2 * Math.PI * (600) / 1200) - 100]} />\r\n                    <About position={[radius * Math.cos(2 * Math.PI * (300) / 1200),-20,radius * Math.sin(2 * Math.PI * (300) / 1200) - 100]} />\r\n\r\n                </Suspense>\r\n                \r\n                <Stars radius={1000} count={5000} depth={100}></Stars>\r\n                <OrbitControls minPolarAngle={Math.PI / 3}></OrbitControls>\r\n            </group>\r\n        </Canvas>\r\n        \r\n        </>\r\n    )\r\n\r\n}\r\n\r\nexport default HomePage;","C:\\Users\\yash\\Documents\\Projects\\CodeForces\\Upsolve\\upsolve\\src\\LogoutPage.js",["307"],"C:\\Users\\yash\\Documents\\Projects\\CodeForces\\Upsolve\\upsolve\\src\\ErroPage.js",[],"C:\\Users\\yash\\Documents\\Projects\\CodeForces\\Upsolve\\upsolve\\src\\Challenge\\Challenge.js",[],"C:\\Users\\yash\\Documents\\Projects\\CodeForces\\Upsolve\\upsolve\\src\\Leaderboard\\LeaderboardPage.js",["308","309"],"\r\nimport { useEffect, useState } from 'react';\r\nimport '../App.css';\r\nimport Leaderboard from './leaderboard';\r\n\r\nimport Skeleton from '@material-ui/lab/Skeleton'\r\nimport NavigationMenu from '../NavigationMenu';\r\n\r\nfunction LeaderboardPage() {\r\n    const country_list = require('country-list');\r\n    let countries = [];\r\n    country_list.getNames().map((country) => {\r\n        countries.push(<option value={country}>{country}</option>)\r\n    })\r\n    const [filter,setfilter] = useState({country:'',institution: '',username:''});\r\n    \r\n    \r\n    \r\n  return (\r\n    <div className=\"App\">\r\n        \r\n        {<NavigationMenu></NavigationMenu> || <Skeleton width=\"100%\" height=\"2rem\"></Skeleton>}\r\n        <section class=\"Leaderboard\">\r\n\r\n                <div class=\"container-fluid leaderboard-container col-lg-8 col-md-6 col-11\">\r\n                    <div class=\"leaderboard-title\">\r\n                        <p>Leaderboard</p>\r\n                    </div>\r\n                    <div class=\"leaderboard-table\">\r\n                        \r\n                    <Leaderboard filter={filter} /> \r\n                        \r\n                        \r\n\r\n                        \r\n                    </div>\r\n                </div>\r\n                <div class=\"container-fluid col-lg-3 col-md-4 col-11 filters\">\r\n                    <div class=\"filter-title\">\r\n                        <p>Filter</p>\r\n                    </div>\r\n                    <div class=\"filter-form row\">\r\n                        <form action=\"#\">\r\n                            <label for=\"country\">Country: </label>\r\n                            <select name=\"country\" onChange={(e)=> {setfilter({...filter,country:e.target.value})}} class=\"col-7\" id=\"country\">\r\n                                <option value=\"\">Any</option>\r\n                                {countries}\r\n                            </select>\r\n                            <label for=\"institution\">Institution: </label>\r\n                            <select name=\"institution\" disabled onChange={(e)=> {setfilter({...filter,institution:e.target.value})}} class=\"col-7\" id=\"institution\">\r\n                                <option value=\"\"></option>\r\n                            </select>\r\n                            <label for=\"username\">Username: </label>\r\n                            <input type=\"text\" name=\"username\" onChange={(e)=> {setfilter({...filter,username:e.target.value})}} class=\"col-7\" id=\"username\"/>\r\n                            {/* <input type=\"submit\" class=\"btn-primary\" value=\"Submit\"/> */}\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n        \r\n        </section>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LeaderboardPage;\r\n","C:\\Users\\yash\\Documents\\Projects\\CodeForces\\Upsolve\\upsolve\\src\\Profile\\ProfileRoute.js",["310","311"],"import React, { useEffect, useState } from 'react'\r\nimport NavigationMenu from '../NavigationMenu'\r\nimport {getUserByname} from '../Api/problem.api';\r\nimport ProfilePage from './ProfilePage'\r\nimport {getToken,TokenAuthentication} from '../Api/auth.api'\r\n\r\nfunction ProfileRoute(props) {\r\n    \r\n    const [user,setuser] = useState({});\r\n    const paramUsername = props.match.params.username;\r\n    const [loggedinUser,setloggedinUser] = useState(false)\r\n    \r\n\r\n    useEffect(async () => {\r\n        if(paramUsername === undefined){\r\n        \r\n            window.location = '/error';\r\n            \r\n            \r\n        }\r\n        \r\n        getUserByname(paramUsername).then((User) => {\r\n            if(!User){\r\n                console.log(User);\r\n                window.location = '/error';\r\n                return;\r\n            }\r\n            else{\r\n                let loggedinUsername = null;\r\n                if(getToken()){\r\n                    loggedinUsername = TokenAuthentication().username;      \r\n                }\r\n                if(loggedinUsername === User.username){\r\n                    setloggedinUser(true);\r\n                }\r\n                setuser(User);\r\n            }\r\n        })\r\n        \r\n        \r\n    },[])\r\n    \r\n    \r\n    \r\n    return (\r\n        <div>\r\n           <NavigationMenu></NavigationMenu> \r\n           {user._id ? <ProfilePage user={user} loggedinUser={loggedinUser}></ProfilePage> : <></>}\r\n        </div>\r\n    )\r\n}\r\nexport default ProfileRoute;","C:\\Users\\yash\\Documents\\Projects\\CodeForces\\Upsolve\\upsolve\\src\\loginPage.js",["312","313","314"],"\r\nimport fetch from 'node-fetch';\r\nimport React, { useEffect, useState } from 'react';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\nimport NavigationMenu from './NavigationMenu';\r\nimport BoxTitle from './BoxTitile';\r\nimport {Link} from 'react-router-dom'\r\nimport {loginProcess,getToken,TokenAuthentication, CheckUser, getFirstName, UpdatePassword} from './Api/auth.api';\r\n\r\n\r\n    \r\nfunction ForgotPassword(props){\r\n    const [steps,setSteps] = useState(0);\r\n    const [handle,setHandle] = useState(\"\");\r\n    const [optCode,setoptCode] = useState(false);\r\n    const [timer,settimer] = useState(0);\r\n    const [password,setpassword] = useState(\"\");\r\n    const [confirmpassword,setconfirmpassword] = useState(\"\");\r\n    const [validatePassword,setvalidatePassword] = useState(\"Please fill out this field\");\r\n\r\n    useEffect(()=>{\r\n        \r\n        if(timer>0){\r\n            setTimeout(()=> {settimer(timer - 1)},1000);\r\n        }\r\n\r\n        \r\n    },[timer])\r\n\r\n    let checkPassword = (e) => {\r\n        let psw = e.target.value;\r\n\r\n        if(psw.length < 8){\r\n            setvalidatePassword(\"Atleast 8 characters required\");\r\n            return;\r\n        }\r\n\r\n        if(!psw.match(/[a-z]/g)){\r\n            setvalidatePassword(\"Lowercase character is required\");\r\n            return;\r\n        }\r\n\r\n        if(!psw.match(/[A-Z]/g)){\r\n            setvalidatePassword(\"Uppercase character is required\");\r\n            return;\r\n        }\r\n\r\n        if(!psw.match(/[0-9]/g)){\r\n            setvalidatePassword(\"A digit is required\");\r\n            return;\r\n        }\r\n\r\n        if(!psw.match(/[!\"#$%&'()*+,-.:;<=>?@[\\]^_`{|}~]/)){\r\n            setvalidatePassword(\"Special character is required\");\r\n            return;\r\n        }\r\n        setvalidatePassword(true);\r\n    }\r\n\r\n    const renderer = (timer) => {\r\n        let minutes = parseInt(timer/60);\r\n        let seconds = parseInt(timer - (minutes*60));\r\n        if (timer<=0) {\r\n          \r\n          if(steps===1 && !props.isLoading){\r\n            setSteps(0);\r\n          }\r\n          return <span>{\"00:00\"}</span>    \r\n        }\r\n        else{ // Render a countdown\r\n        return <span>{\"0\"+minutes}:{seconds<10 ? \"0\"+seconds : seconds}</span>;\r\n        }\r\n      };\r\n\r\n\r\n    const StepContent = [\r\n        <>\r\n            <i className=\"fa fa-arrow-left align-self-start\" style={{cursor: \"pointer\"}} onClick={() => props.close()}></i>\r\n            <div className=\"box-form my-3\">\r\n                <label for=\"username\">Username:</label>\r\n                <input type=\"text\" value={handle} onChange={(e) => setHandle(e.target.value)} placeholder=\"Enter Username\"></input>\r\n            </div>\r\n            <button className=\"shadow\" disabled={handle===\"\"} onClick={async () => {\r\n                props.loading(true)\r\n                let result = await CheckUser(handle);\r\n                props.loading(false)\r\n                if(result.status){\r\n                    var OTP = Math.ceil(Math.random()*1000000);\r\n                    settimer(90);\r\n                    setoptCode(OTP);\r\n                    setSteps(prev => prev+1);\r\n                }else{\r\n                    props.error(result.error);\r\n                    setTimeout(() => {\r\n                        props.error(false);\r\n                    },5000)\r\n                }\r\n            }}>Proceed</button>\r\n        </>,\r\n        <>\r\n            <i className=\"fa fa-arrow-left align-self-start\" style={{cursor: \"pointer\"}} onClick={() => setSteps(prev => prev-1)}></i>\r\n            <h1>{renderer(timer)}</h1>\r\n            <p>Change the first name of your codeForces handle to this \"<b>{optCode}</b>\" (Without Quote). <br></br><strong>{\"CodeForces --> Profile --> Settings --> Social --> Change your first name\"}</strong></p>\r\n            <button className={props.isloading ? \" loading\" : \"\"} onClick={async () => {\r\n                props.loading(true);\r\n                let result = await getFirstName(handle);\r\n                \r\n                if(parseInt(result) !== parseInt(optCode)){\r\n                    props.loading(false);\r\n                    props.error(\"Unable to verify\");\r\n                    setSteps(0)\r\n                    setTimeout(() => {\r\n                        props.error(\"\");\r\n                    },5000)\r\n                }\r\n                else{\r\n                    props.loading(false)\r\n                    setSteps(prev => prev+1)\r\n                }\r\n            }}>{props.isloading ? \"Verifying...\" : \"Verify\"}</button>\r\n        </>,\r\n        <>\r\n            <div className=\"box-form\">\r\n                <div class=\"form-group\">\r\n                    <label>Password:</label>\r\n                    <input type=\"password\" class=\"form-control\" onChange={(e) => {setpassword(e.target.value);checkPassword(e)}} placeholder=\"Enter Password\" required />\r\n                    {validatePassword !== true ? <div class=\"text-danger\">{validatePassword}</div> : ''}\r\n                </div>\r\n                <div class=\"form-group\">\r\n                    <label>Confirm Password:</label>\r\n                    <input type=\"password\" class=\"form-control\" onChange={(e) => {setconfirmpassword(e.target.value)}} placeholder=\"Confrim Password\" required />\r\n                    {confirmpassword === \"\" ? <div className=\"text-danger\">Please fill out this field.</div> : (confirmpassword !== password ? <div className=\"text-danger\">Should match the password</div> : '')}\r\n                    \r\n                </div>\r\n            </div>\r\n            <button disabled={validatePassword!==true || password!==confirmpassword} onClick={async () => {\r\n                props.loading(true);\r\n                let result = await UpdatePassword(handle,password);\r\n                if(result){\r\n                    props.loading(false)\r\n                }else{\r\n                    props.loading(false)\r\n                    props.error(\"Something Went Wrong\");\r\n                    setTimeout(() => {\r\n                        props.error(\"\");\r\n                    },5000)\r\n                }\r\n            }}>Save</button>\r\n        </>\r\n    ]\r\n\r\n    return (\r\n        StepContent[steps]\r\n    )\r\n}\r\n\r\n\r\nfunction LoginPage() {\r\n    \r\n    // const [username,setusername] = useState(\"\");\r\n    const [error,setError] = useState(false);\r\n    const [isLoading,setisLoading] = useState(false);\r\n    const [forgotPasword,setForgotPassword] = useState(false);\r\n    let username=\"\",password=\"\";\r\n\r\n    \r\n\r\n    useEffect(() => {\r\n        if(getToken()){\r\n            let payload = TokenAuthentication();\r\n            window.location = '/profile/'+payload.username;\r\n        }\r\n        console.log(username,password)\r\n    },[])\r\n    \r\n    return(\r\n\r\n        \r\n        <div>\r\n\r\n            <NavigationMenu></NavigationMenu>\r\n            {error !== false ? \r\n            <div className=\"text-center p-1 m-auto text-light alert-animation\" style={{width: \"30%\",borderRadius: \"5px\",\"fontSize\": \"1.2rem\"}}>\r\n                <MuiAlert variant=\"filled\" severity=\"error\">{error}</MuiAlert>\r\n            </div> \r\n            \r\n            : ''}\r\n\r\n            <div className=\"box\">\r\n                <BoxTitle title=\"Login\"></BoxTitle>\r\n                <div className={isLoading ? \"box-content-dimension loading\" : \"box-content-dimension\"}>\r\n                {forgotPasword ? <ForgotPassword close={() => setForgotPassword(false)} error={(e) => setError(e)} isLoading={isLoading} loading={(b) => setisLoading(b)} /> : <>\r\n                    <div className=\"box-form\">\r\n                        <label for=\"username\">Username:</label>\r\n                        <input type=\"text\" placeholder=\"Enter Username\" onChange={(e)=>{username = e.target.value}}></input>\r\n                        <label for=\"password\">Password:</label>\r\n                        <input type=\"password\" placeholder=\"Enter Password\" onChange={(e)=>{password = e.target.value}}></input>\r\n                    </div>\r\n                    <a className=\"text-primary\" onClick={() => setForgotPassword(true)} style={{fontSize: '14px',cursor: 'pointer'}}>Forgot Password ?</a>\r\n                    <button className=\"shadow\" onClick={async (e) => {\r\n                        \r\n                        setisLoading(true);\r\n                        let result = await loginProcess(username,password)\r\n                        e.target.previousSibling.previousSibling.childNodes[1].value = \"\";\r\n                        e.target.previousSibling.previousSibling.childNodes[3].value = \"\";\r\n                        setisLoading(false);\r\n                        if(!result || result === false){\r\n                            console.log(\"Error\", result)\r\n                            setError(\"Incorrect Credentials\");\r\n                            setTimeout(() => {\r\n                                setError(false);\r\n                            },5000)\r\n                        }\r\n                        \r\n                        }}>{isLoading ? \"Logging...\" : \"Login\"}</button>\r\n                        \r\n                    <Link to=\"/register\">Create an Account</Link>\r\n                    </>}\r\n                </div>\r\n            </div>\r\n\r\n            \r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LoginPage;","C:\\Users\\yash\\Documents\\Projects\\CodeForces\\Upsolve\\upsolve\\src\\RegisterPage.js",["315","316"],"\r\nimport fetch from 'node-fetch';\r\nimport React, { useEffect, useState } from 'react';\r\nimport {getUserByname} from './Api/problem.api'\r\nimport {getFirstName,registrationProcess,getToken,TokenAuthentication} from './Api/auth.api'\r\nimport NavigationMenu from './NavigationMenu';\r\nimport BoxTitle from './BoxTitile';\r\nimport {Link} from 'react-router-dom'\r\nimport Countdown from 'react-countdown';\r\n\r\n\r\n\r\n    \r\n\r\n\r\n\r\nfunction RegisterPage() {\r\n    \r\n    \r\n    const [isloading,setisLoading] = useState(false);\r\n    const [Error,setError] = useState(\"\");\r\n    const [username,setusername] = useState(\"\");\r\n    const [password,setpassword] = useState(\"\");\r\n    const [confirmpassword,setconfirmpassword] = useState(\"\");\r\n    const [country,setcountry] = useState(\"\");\r\n    const [institution,setinstitution] = useState(\"\");\r\n    const [bio,setbio] = useState(\"\");\r\n    const [validatePassword,setvalidatePassword] = useState(\"Please fill out this field\");\r\n    const [optPgae,setoptPage] = useState(false);\r\n    const [optCode,setoptCode] = useState(false);\r\n    const [timer,settimer] = useState(0);\r\n    const country_list = require('country-list');\r\n\r\n    useEffect(()=>{\r\n\r\n        \r\n        \r\n        if(timer>0){\r\n            setTimeout(()=> {settimer(timer - 1)},1000);\r\n        }\r\n\r\n        \r\n    },[timer])\r\n\r\n    useEffect(() => {\r\n        if(getToken()){\r\n            let payload = TokenAuthentication();\r\n            window.location = '/profile/'+payload.username;\r\n        }\r\n    },[])\r\n\r\n\r\n    let init = ()=>{\r\n        setusername(\"\");\r\n        setpassword(\"\");\r\n        setconfirmpassword(\"\");\r\n        setcountry(\"\");\r\n        setinstitution(\"\");\r\n        setbio(\"\");\r\n        setvalidatePassword(\"Please fill out this field\")\r\n        setError(\"\");\r\n        setisLoading(false);\r\n        setoptCode(false);\r\n        settimer(0);\r\n    }\r\n    \r\n    let checkPassword = (e) => {\r\n        let psw = e.target.value;\r\n\r\n        if(psw.length < 8){\r\n            setvalidatePassword(\"Atleast 8 characters required\");\r\n            return;\r\n        }\r\n\r\n        if(!psw.match(/[a-z]/g)){\r\n            setvalidatePassword(\"Lowercase character is required\");\r\n            return;\r\n        }\r\n\r\n        if(!psw.match(/[A-Z]/g)){\r\n            setvalidatePassword(\"Uppercase character is required\");\r\n            return;\r\n        }\r\n\r\n        if(!psw.match(/[0-9]/g)){\r\n            setvalidatePassword(\"A digit is required\");\r\n            return;\r\n        }\r\n\r\n        if(!psw.match(/[!\"#$%&'()*+,-.:;<=>?@[\\]^_`{|}~]/)){\r\n            setvalidatePassword(\"Special character is required\");\r\n            return;\r\n        }\r\n        setvalidatePassword(true);\r\n    }\r\n\r\n    const renderer = (timer) => {\r\n        let minutes = parseInt(timer/60);\r\n        let seconds = parseInt(timer - (minutes*60));\r\n        if (timer<=0) {\r\n          \r\n          if(optPgae && !isloading){\r\n            init();\r\n            setoptPage(false);\r\n          }\r\n          return <span>{\"00:00\"}</span>    \r\n        }\r\n        else{ // Render a countdown\r\n        return <span>{\"0\"+minutes}:{seconds<10 ? \"0\"+seconds : seconds}</span>;\r\n        }\r\n      };\r\n\r\n    return(\r\n\r\n        \r\n        <div>\r\n\r\n            <NavigationMenu></NavigationMenu>\r\n            \r\n            {Error !== \"\" ? \r\n            <div className=\"alert-heading text-center p-1 m-auto bg-danger text-light alert-animation\" style={{width: \"30%\",borderRadius: \"5px\",\"fontSize\": \"1.2rem\"}}>\r\n                {Error}\r\n            </div> \r\n            \r\n            : ''}\r\n\r\n            <div className=\"box\">\r\n                <BoxTitle title=\"Register\"></BoxTitle>\r\n                {optPgae === false ?\r\n                <div className={\"box-content-dimension mb-5\"+ (isloading ? \" loading\" : \"\")}>\r\n                    \r\n                    <div className=\"box-form p-4\">\r\n                        \r\n                            <div class=\"form-group\">\r\n                                <label>Username:</label>\r\n                                <input type=\"text\" className=\"form-control\" placeholder=\"Enter Code-Forces Handle\" onChange={(e) => {setusername(e.target.value)}} required />\r\n                                {username === \"\" ? <div class=\"text-danger\">Please fill out this field.</div> : ''}\r\n                            </div>\r\n                            <div class=\"form-group\">\r\n                                <label>Country: <select onChange={(e) => {setcountry(e.target.value)}}>\r\n                                                    <option value=\"\">--Select--</option>\r\n                                                    {country_list.getNames().map((ct) => <option value={ct}>{ct}</option>)}\r\n                                                </select>\r\n                                </label>\r\n                                \r\n                            </div>\r\n                            <div class=\"form-group\" style={{display: \"none\"}}>\r\n                                <label>Institution: <select onChange={(e) => {setinstitution(e.target.value)}}>\r\n                                                    <option value=\"India\">India</option>\r\n                                                </select>\r\n                                </label>\r\n                                \r\n                            </div>\r\n                            <div class=\"form-group\">\r\n                                <label>Password:</label>\r\n                                <input type=\"password\" class=\"form-control\" onChange={(e) => {setpassword(e.target.value);checkPassword(e)}} placeholder=\"Enter Password\" required />\r\n                                {validatePassword !== true ? <div class=\"text-danger\">{validatePassword}</div> : ''}\r\n                            </div>\r\n                            <div class=\"form-group\">\r\n                                <label>Confirm Password:</label>\r\n                                <input type=\"password\" class=\"form-control\" onChange={(e) => {setconfirmpassword(e.target.value)}} placeholder=\"Confrim Password\" required />\r\n                                {confirmpassword === \"\" ? <div className=\"text-danger\">Please fill out this field.</div> : (confirmpassword !== password ? <div className=\"text-danger\">Should match the password</div> : '')}\r\n                                \r\n                            </div>\r\n                            \r\n                        \r\n                    </div>\r\n                    <button type=\"submit\" className=\"shadow\" onClick={async () => {\r\n                        if(validatePassword !== true || username === \"\" || password !== confirmpassword){return}\r\n                        setisLoading(true);\r\n                        let result = await getUserByname(username);\r\n                        console.log(result);\r\n                        if(!result || result === false){\r\n                            var OTP = Math.ceil(Math.random()*1000000);\r\n                            settimer(90);\r\n                            setoptCode(OTP);\r\n                            setisLoading(false);\r\n                            setoptPage(true);\r\n                        }\r\n                        else{\r\n                            setisLoading(false);\r\n                            setError(\"User name already exists\");\r\n                            \r\n\r\n                            setTimeout(() => {\r\n                                setError(\"\");\r\n                            },5000)\r\n                            return;\r\n                        }\r\n                    }}>{isloading ? \"Loading...\" : \"Next\"}</button>\r\n\r\n                            \r\n                    <Link to=\"/login\">Already Have an account</Link>\r\n                            \r\n                </div>\r\n                :\r\n                <div className={\"box-content-dimension mb-5\"+(isloading ? \" loading\" : \"\")}>\r\n                    <h1>{renderer(timer)}</h1>\r\n                    <p>Change the first name of your codeForces handle to this \"<b>{optCode}</b>\" (Without Quote). <br></br><strong>{\"CodeForces --> Profile --> Settings --> Social --> Change your first name\"}</strong></p>\r\n                    <button className={isloading ? \" loading\" : \"\"} onClick={async () => {\r\n                        setisLoading(true);\r\n                        let result = await getFirstName(username);\r\n                        \r\n                        if(parseInt(result) !== parseInt(optCode)){\r\n                            setisLoading(false);\r\n                            init();\r\n                            setError(\"Unable to verify\");\r\n                            setoptPage(false);\r\n                            setTimeout(() => {\r\n                                setError(\"\");\r\n                            },5000)\r\n                        }\r\n                        else{\r\n                            let register = await registrationProcess(username,password,country,institution,bio);\r\n                            if(!register || register===false){\r\n                                setisLoading(false);\r\n                                init();\r\n                                setError(\"Unable to Register\");\r\n                                setoptPage(false);\r\n                            }\r\n                            else{\r\n                                window.location=\"/challenge\"\r\n                                setisLoading(false);\r\n\r\n                            }\r\n                        }\r\n                    }}>{isloading ? \"Verifying...\" : \"Verify\"}</button>\r\n                    <Link to=\"/login\">Already Have an account</Link>\r\n                </div>\r\n                }\r\n            </div>\r\n\r\n            \r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RegisterPage;","C:\\Users\\yash\\Documents\\Projects\\CodeForces\\Upsolve\\upsolve\\src\\NavigationMenu.js",["317","318","319"],"import React,{useState,useEffect} from 'react';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport {logout,TokenAuthentication} from './Api/auth.api';\r\nimport {Link} from 'react-router-dom'\r\nfunction NavigationMenu() {\r\n\r\n    const [status,setstatus] = useState(false);\r\n    const [payload,setpayload] =useState({});\r\n    const [open,setOpen] = useState(false);\r\n\r\n\r\n    useEffect(()=>{\r\n        let payload = TokenAuthentication();\r\n        if(payload){\r\n            setstatus(true);\r\n            setpayload(payload)\r\n        }\r\n    },[])\r\n\r\n    let Toggler = ()=>{\r\n        setOpen(!open);\r\n    }\r\n\r\n    return (\r\n        <section class=\"navigation-menu\">\r\n            <div class=\"nav-bar col-12\">\r\n                <p class=\"text-center\" onClick={() => window.location = \"/\"} style={{cursor: \"pointer\"}}>{\"<Upsolve />\"}</p>\r\n                <div class=\"nav-items col-lg-3 col-6 text-center\">\r\n                    <a onClick={(e) => {Toggler()}} className=\"position-relative back-btn\" >\r\n                        <Tooltip title=\"Navigate\" arrow>\r\n                            <div>\r\n                                <i class=\"fa fa-rocket\"></i>\r\n                            </div>\r\n                        </Tooltip>\r\n                        {open ? \r\n                        <>\r\n                        <a href=\"/\" className=\"position-absolute back-btn\" style={{top: \"120%\", left: \"-120%\"}}>\r\n                            <Tooltip title=\"Home\" arrow>\r\n                                <div>\r\n                                    <i class=\"fa fa-home\"></i>\r\n                                </div>\r\n                            </Tooltip>\r\n                            \r\n                        </a>\r\n                        <a href=\"/leaderboard\" className=\"position-absolute back-btn\" style={{top: \"170%\", left: \"0%\"}}>\r\n                            <Tooltip title=\"Leaderboard\" arrow>\r\n                                <div>\r\n                                    <i class=\"fa fa-trophy\"></i>\r\n                                </div>\r\n                            </Tooltip>\r\n                            \r\n                        </a>\r\n                        <a href=\"/challenge\" className=\"position-absolute back-btn\" style={{top: \"120%\", left: \"120%\"}}>\r\n                            <Tooltip title=\"Challenge\" arrow>\r\n                                <div>\r\n                                    <i class=\"fa fa-calendar-check-o\"></i>\r\n                                </div>\r\n                            </Tooltip>\r\n                            \r\n                        </a>\r\n                        </>\r\n                        : \r\n                         <></>       \r\n                        }                       \r\n                    </a>\r\n                    <a href={status ? \"/profile/\"+payload?.username : \"/login\"} data-toogle=\"tooltip\" data-palcement=\"bottom\" title={status ? payload?.username : \"Login/Register\"}>\r\n                        <Tooltip title={status ? payload?.username : \"Login/Register\"} arrow>\r\n                            <div>\r\n                                <i class=\"fa fa-user\"></i>\r\n                            </div>\r\n                        </Tooltip>\r\n                    </a>\r\n                    {status && <a href=\"#\" data-toogle=\"tooltip\" data-palcement=\"bottom\" title=\"Logout\">\r\n                        <Tooltip title=\"Logout\" arrow>\r\n                            <div onClick={() => {logout()}}>\r\n                                <i class=\"fa fa-sign-out\"></i>\r\n                            </div>\r\n                        </Tooltip>\r\n                    </a>\r\n                    }\r\n                </div>\r\n            </div>\r\n        </section>\r\n    );\r\n}\r\n\r\nexport default NavigationMenu;\r\n","C:\\Users\\yash\\Documents\\Projects\\CodeForces\\Upsolve\\upsolve\\src\\Leaderboard\\leaderboard.js",["320","321"],"import {useState,useEffect} from 'react'; \r\nimport Entry from './entry';\r\nimport Skeleton from '@material-ui/lab/Skeleton';\r\nimport Paginate from 'react-paginate';\r\nimport {LeaderboardList} from '../Api/problem.api';\r\n\r\nfunction Leaderboard(props) {\r\n\r\n    \r\n\r\n    \r\n    const [items,setItems] = useState([]);\r\n    const [skip,setskip] = useState(1);\r\n    const [limit,setlimit] = useState(20);\r\n    const [count,setcount] = useState(0);\r\n    const [loading,setloading] = useState(true);\r\n    const filter = props.filter;\r\n    useEffect(()=>{\r\n        setskip(1);\r\n    },[filter])\r\n    useEffect(()=>{\r\n        setloading(true);\r\n        LeaderboardList(skip,limit,filter).then((result)=>{\r\n            setloading(false);\r\n            setItems(result.data);\r\n            setcount(result.count);\r\n        })  \r\n    },[skip,limit,filter]);\r\n\r\n\r\n    \r\n    var board = [];\r\n    \r\n    if(loading){\r\n        board.push(<Skeleton variant=\"rect\" width=\"100%\" height={40}></Skeleton>);\r\n        board.push(<Skeleton variant=\"rect\" width=\"100%\" height={40}></Skeleton>);\r\n        board.push(<Skeleton variant=\"rect\" width=\"100%\" height={40}></Skeleton>);\r\n        board.push(<Skeleton variant=\"rect\" width=\"100%\" height={40}></Skeleton>);\r\n        board.push(<Skeleton variant=\"rect\" width=\"100%\" height={40}></Skeleton>);\r\n        return board;\r\n    }\r\n\r\n    if(!items || items.length == 0){\r\n        board.push(<h1 style={{color: \"Orange\"}}>!! No User found !!</h1>);\r\n        return board;\r\n    }\r\n    // console.log(items);\r\n    items.forEach((el,i) => {\r\n        board.push(<Entry offset={(skip-1)*limit} id={i} name={el.username} streak={el.streak} />);\r\n    })\r\n    board.push(\r\n            \r\n            <Paginate containerClassName=\"paginate\" pageCount={Math.ceil(count/limit)} pageRangeDisplayed={5} marginPagesDisplayed={3} initialPage={skip - 1} previousLabel=\"<<\" nextLabel=\">>\" activeClassName=\"active-page\" onPageChange={(e)=>{setskip((e.selected) + 1)}}></Paginate>\r\n\r\n            \r\n        )\r\n    return board;\r\n}\r\n\r\nexport default Leaderboard;","C:\\Users\\yash\\Documents\\Projects\\CodeForces\\Upsolve\\upsolve\\src\\Challenge\\ChallengeContent.js",[],"C:\\Users\\yash\\Documents\\Projects\\CodeForces\\Upsolve\\upsolve\\src\\authGaurd.js",[],"C:\\Users\\yash\\Documents\\Projects\\CodeForces\\Upsolve\\upsolve\\src\\Api\\problem.api.js",[],"C:\\Users\\yash\\Documents\\Projects\\CodeForces\\Upsolve\\upsolve\\src\\Profile\\ProfilePage.js",["322","323","324","325","326"],"import React,{useRef,useState} from 'react';\r\n// let LineChart = require('react-chartjs').Line\r\nimport Chart from 'react-apexcharts';\r\nimport {updateUser} from '../Api/auth.api';\r\nfunction  ProfilePage(props) {\r\n\r\n    const country_list = require('country-list');\r\n    let countries = [];\r\n    country_list.getNames().map((country) => {\r\n        countries.push(<option value={country}>{country}</option>)\r\n    })\r\n    const [isloading,setisloading] = useState(false);\r\n    const firstName = useRef(null);\r\n    const lastName = useRef(null);\r\n    const bio = useRef(null);\r\n    const CountryRef = useRef(null);\r\n    const institutionRef = useRef(null);\r\n    let problems = [];\r\n    let series= [{\r\n        name: 'Upsolved',\r\n        data: []\r\n      }];\r\n     let options= {\r\n        grid:{\r\n            show: false,\r\n        },\r\n        \r\n        chart: {\r\n            \r\n          type: 'area',\r\n          stacked: false,\r\n          height: 350,\r\n          animations:{\r\n              enabled:true,\r\n          },\r\n          \r\n          zoom: {\r\n            type: 'x',\r\n            enabled: true,\r\n            autoScaleYaxis: true\r\n          },\r\n          toolbar: {\r\n            autoSelected: 'zoom'\r\n          }\r\n        },\r\n        dataLabels: {\r\n          enabled: false\r\n        },\r\n        markers: {\r\n          size: 5,\r\n        },\r\n        title: {\r\n          text: 'Upsolved Questions',\r\n          align: 'left'\r\n        },\r\n        fill: {\r\n          type: 'gradient',\r\n          gradient: {\r\n            shadeIntensity: 1,\r\n            inverseColors: false,\r\n            opacityFrom: 0.5,\r\n            opacityTo: 0,\r\n            stops: [0, 90, 100]\r\n          },\r\n        },\r\n        yaxis: {\r\n          title: {\r\n            text: 'Number of Questions'\r\n          },\r\n          min:0\r\n        },\r\n        xaxis: {\r\n         \r\n          formate: \"D-MM-YYYY\"\r\n        },\r\n        tooltip: {\r\n          shared: false,\r\n        },\r\n        stroke:{\r\n            curve: 'straight'\r\n        }\r\n      };   \r\n    \r\n     \r\n    let maxUpsolved = parseInt(0);\r\n    let UpsolveQuestion = props.user.UpsolveStreak;\r\n    \r\n    if(UpsolveQuestion && UpsolveQuestion !== null && UpsolveQuestion !== undefined){\r\n        Object.keys(UpsolveQuestion).map((key,i) => {\r\n            let problemDescription = [];\r\n            series[0].data.push({'x': key,'y': UpsolveQuestion[key].length});\r\n            maxUpsolved = Math.max(maxUpsolved,UpsolveQuestion[key].length);\r\n            UpsolveQuestion[key].forEach((value) => {\r\n                if(value.contestId){\r\n                    value.contestLink = \"https://codeforces.com/contest/\"+value.contestId;\r\n                    value.problemLink = \"https://codeforces.com/contest/\"+value.contestId+\"/problem/\"+value.index;\r\n                }\r\n                \r\n                problemDescription.push(\r\n                    <div className=\"row offset-0 p-lg-1 p-md-1 offset-md-1 offset-lg-1 ml-0\" style={{fontSize: \"1rem\",fontFamily: \"open-sans\",fontWeight: \"600\",width: \"100%\"}}>\r\n                                \r\n                        <p className=\"text-center col-4 col-md-5 col-lg-6 m-auto\" style={{whiteSpace:\"nowrap\",overflowX: \"hidden\",textOverflow: \"ellipsis\"}}>{value.name ? <a href={value.problemLink} target=\"_blank\">{value.name}</a> : \"-\"}</p>\r\n                        <p className=\"text-center col-4 col-md-3 col-lg-3 m-auto\">{value.contestId ? <a href={value.contestLink} target=\"_blank\">{value.contestId}</a> : \"-\"}</p>\r\n                        <p className=\"text-center col-4 col-md-3 col-lg-3 m-auto\">{value.rating ? value.rating : \"-\"}</p>\r\n                    </div>\r\n                )\r\n            })\r\n            problems.unshift(\r\n                <li id={\"#\"+key} class=\"timeline-sm-item pl-1\">\r\n                \r\n                    <span class=\"timeline-sm-date\">{key}</span>\r\n                    <div className=\"row p-0 pt-3 pl-0 d-flex justify-content-between align-items-center flex-column\">\r\n                        {problemDescription}\r\n                    </div>\r\n                </li>\r\n            )\r\n            \r\n        })\r\n    }\r\n    return(\r\n        \r\n        <div class=\"container mt-4\">\r\n        <div class=\"row\">\r\n            <div class=\"col-lg-4 col-xl-4\">\r\n                <div class=\"card-box text-center\">\r\n                    <img src=\"https://bootdey.com/img/Content/avatar/avatar7.png\" class=\"rounded-circle avatar-xl img-thumbnail\" alt=\"profile-image\" />\r\n        \r\n                    <h4 class=\"mb-0\">{props.user.username}</h4>\r\n                    \r\n        \r\n                    <div class=\"text-left mt-3\">\r\n                        <h4 class=\"font-13 text-uppercase\">About Me :</h4>\r\n                        <p class=\"text-muted font-13 mb-3\">\r\n                            {props.user.bio ? props.user.bio : \"A passionate programmer\"}\r\n                        </p>\r\n                        <p class=\"text-muted mb-2 font-13\"><strong>Full Name :</strong> <span class=\"ml-2\">{props.user.name ? props.user.name : \"-\"}</span></p>\r\n        \r\n                        \r\n        \r\n                        <p class=\"text-muted mb-2 font-13\"><strong>Institution :</strong> <span class=\"ml-2 \">{props.user.institution ? props.user.institution : \"-\"}</span></p>\r\n        \r\n                        <p class=\"text-muted mb-1 font-13\"><strong>Location :</strong> <span class=\"ml-2\">{props.user.country ? props.user.country : \"-\"}</span></p>\r\n                        <p class=\"text-muted mb-1 font-13\"><strong>Max-Upsolved :</strong> <span class=\"ml-2 text-success\">{parseInt(maxUpsolved)}</span></p>\r\n                        <p class=\"text-muted mb-1 font-13\"><strong>Streak :</strong> <span class=\"ml-2 text-success\">{parseInt(props.user.streak ? props.user.streak : \"0\")}</span></p>\r\n                    </div>\r\n        \r\n                \r\n                </div> \r\n        \r\n\r\n        \r\n            </div> \r\n            <div class=\"col-lg-8 col-xl-8\">\r\n                <div class=\"card-box\">\r\n                \r\n                    <ul class=\"nav nav-pills navtab-bg\">\r\n                        <li class=\"nav-item\">\r\n                            <a href=\"#about-me\" data-toggle=\"tab\" aria-expanded=\"true\" class=\"nav-link ml-0 active\">\r\n                                Graph\r\n                            </a>\r\n                        </li>\r\n                        {props.loggedinUser === true ?\r\n                        <li class=\"nav-item\">\r\n                            <a href=\"#settings\" data-toggle=\"tab\" aria-expanded=\"false\" class=\"nav-link\">\r\n                                <i class=\"mdi mdi-settings-outline mr-1\"></i>Settings\r\n                            </a>\r\n                        </li>\r\n                        :\r\n                        ''\r\n                        } \r\n                    </ul>\r\n                          \r\n                    <div class=\"tab-content\">\r\n                        \r\n                        <div class=\"tab-pane show active pt-5\" id=\"about-me\">\r\n\r\n                        \r\n                       \r\n                        <Chart options={options} series={series} type=\"area\" height={350} />\r\n\r\n    \r\n                        </div>\r\n                        \r\n                        {/* <div class=\"tab-pane\" id=\"settings\"><h1>Hello</h1></div> */}\r\n                         {props.loggedinUser === true ?\r\n                         <div class=\"tab-pane\" id=\"settings\">\r\n                            <form>\r\n                                <h5 class=\"mb-3 text-uppercase bg-light p-2\"><i class=\"mdi mdi-account-circle mr-1\"></i> Personal Info</h5>\r\n                                \r\n                                <div class=\"row\">\r\n                                    <div class=\"col-md-6\">\r\n                                        <div class=\"form-group\">\r\n                                            <label for=\"firstname\">First Name</label>\r\n                                            <input type=\"text\" ref={firstName} class=\"form-control\" id=\"firstname\" defaultValue={props.user.name ? props.user.name.split(' ')[0] : ''} />\r\n                                        </div>\r\n                                    </div>\r\n                                    \r\n                                    <div class=\"col-md-6\">\r\n                                        <div class=\"form-group\">\r\n                                            <label for=\"lastname\">Last Name</label>\r\n                                            <input type=\"text\" ref={lastName} class=\"form-control\" id=\"lastname\" defaultValue={props.user.name ? props.user.name.split(' ')[1] : ''} />\r\n                                        </div>\r\n                                    </div> \r\n                                </div> \r\n                                <div class=\"row\">\r\n                                    <div class=\"col-12\">\r\n                                        <div class=\"form-group\">\r\n                                            <label for=\"userbio\">Bio</label>\r\n                                            <textarea class=\"form-control\" ref={bio} id=\"userbio\" rows=\"4\" defaultValue={props.user.bio ? props.user.bio : \"Write Something About yourself\"}></textarea>\r\n                                        </div>\r\n                                    </div> \r\n                                </div> \r\n                                <div class=\"row\">\r\n                                    <div class=\"col-md-6\">\r\n                                        <div class=\"form-group\">\r\n                                            <label for=\"Country\">Country</label>\r\n                                            <select  class=\"form-control\" ref={CountryRef} id=\"Country\" >\r\n                                                <option defaultValue={props.user.country}>{props.user.country}</option>\r\n                                                {countries}\r\n                                            </select>\r\n                                            \r\n                                        </div>\r\n                                    </div>\r\n                                    <div class=\"col-md-6\">\r\n                                        <div class=\"form-group\">\r\n                                            <label for=\"institution\">Institution</label>\r\n                                            <input type=\"text\" ref={institutionRef} class=\"form-control\" id=\"institution\" value={props.user.institution}  />\r\n                                            \r\n                                        </div>\r\n                                    </div> \r\n                                </div> \r\n                                \r\n                                \r\n                                <div class=\"text-right\">\r\n                                    <button type=\"submit\" onClick={async (e)=> {\r\n                                        e.preventDefault();\r\n                                        setisloading(true);\r\n                                        await updateUser(props.user.username,firstName.current.value,lastName.current.value,CountryRef.current.value,institutionRef.current.value,bio.current.value)\r\n                                        setisloading(false);\r\n                                        window.location.reload();\r\n                                        }} class=\"btn btn-success waves-effect waves-light mt-2\"><i class=\"mdi mdi-content-save\" ></i> {isloading ? \"Saving...\" : \"Save\"}</button>\r\n                                </div>\r\n                            </form>\r\n                        </div>\r\n                        :\r\n                        ''\r\n                        }      \r\n                    </div>  \r\n                </div> \r\n        \r\n            </div> \r\n\r\n            <div className=\"row card-box col-12 mb-4\">\r\n                <div className=\"col-12 col-md-11 col-lg-11\">\r\n                        <h5 class=\"mb-4 text-uppercase\"><i class=\"mdi mdi-briefcase mr-1\"></i>\r\n                            Upsolved Question</h5>\r\n        \r\n                            <ul class=\"list-unstyled timeline-sm\" style={{maxHeight: \"100%\",overflowY:\"scroll\",width: \"100%\"}}>\r\n                                <li>\r\n                                \r\n                                        <div className=\"row mb-2 ml-3 p-1 pr-1 pl-2 p-lg-2 p-md-2 offset-md-1 offset-lg-1\" style={{backgroundColor: \"#f1f5f7\",borderColor: \"#dee2e6\",fontSize: \"1rem\",fontFamily: \"open-sans\",fontWeight: \"600\",color: \"#6c757d\",minWidth: \"90%\"}}>\r\n                                            \r\n                                            <p className=\"text-center col-3 col-md-5 col-lg-6 m-auto ml-0\">Name</p>\r\n                                            <p className=\"text-center col-4 col-md-3 col-lg-3 m-auto\">ConestId</p>\r\n                                            <p className=\"text-center col-4 col-md-3 col-lg-3 m-auto ml-5\">Rating</p>\r\n                                        </div>\r\n                                    \r\n                                        \r\n                                </li>\r\n                                {problems}\r\n                                \r\n                            </ul> \r\n                </div>\r\n            </div>\r\n        </div>\r\n        </div>\r\n        \r\n    \r\n    \r\n    )\r\n}\r\n\r\nexport default ProfilePage;","C:\\Users\\yash\\Documents\\Projects\\CodeForces\\Upsolve\\upsolve\\src\\BoxTitile.js",[],"C:\\Users\\yash\\Documents\\Projects\\CodeForces\\Upsolve\\upsolve\\src\\Api\\auth.api.js",[],"C:\\Users\\yash\\Documents\\Projects\\CodeForces\\Upsolve\\upsolve\\src\\Challenge\\ChallengeTimer.js",[],"C:\\Users\\yash\\Documents\\Projects\\CodeForces\\Upsolve\\upsolve\\src\\Challenge\\ChallengeDailyQues.js",["327"],"C:\\Users\\yash\\Documents\\Projects\\CodeForces\\Upsolve\\upsolve\\src\\Leaderboard\\entry.js",["328"],"import React from 'react';\r\nimport { CircularProgressbar } from 'react-circular-progressbar';\r\nimport 'react-circular-progressbar/dist/styles.css';\r\nimport {Link} from 'react-router-dom'\r\nexport default class Entry extends React.Component{\r\n\r\n    \r\n    render(){\r\n        let id = \"table\"+this.props.id;\r\n        let percentage = parseInt((this.props.streak/30)*100);\r\n        \r\n        return(\r\n            <Link to={\"/profile/\"+this.props.name} style={{textDecoration: \"none\"}}>\r\n            <div class=\"entry shadow\">\r\n                \r\n                <div class=\"rank\">{this.props.id + parseInt(this.props.offset) + 1} </div>\r\n                <div class=\"names\">{this.props.name}</div>\r\n                <CircularProgressbar className=\"PB\"\r\n                  value={percentage}\r\n                  text={this.props.streak}\r\n                  styles={{\r\n                    // Customize the root svg element\r\n                    root: {},\r\n                    // Customize the path, i.e. the \"completed progress\"\r\n                    path: {\r\n                      // Path color\r\n                      stroke: 'linear-gradient(#0052D4, #4364F7, #6FB1FC)',\r\n                      // Whether to use rounded or flat corners on the ends - can use 'butt' or 'round'\r\n                      strokeLinecap: 'butt',\r\n                      // Customize transition animation\r\n                      transition: 'stroke-dashoffset 0.5s ease 0s',\r\n                      // Rotate the path\r\n                    //   transform: 'rotate(0.25turn)',\r\n                      transformOrigin: 'center center',\r\n                    },\r\n                    // Customize the circle behind the path, i.e. the \"total progress\"\r\n                    trail: {\r\n                      // Trail color\r\n                      stroke: '#d6d6d6',\r\n                      // Whether to use rounded or flat corners on the ends - can use 'butt' or 'round'\r\n                      strokeLinecap: 'butt',\r\n                      // Rotate the trail\r\n                    //   transform: 'rotate(0.25turn)',\r\n                      transformOrigin: 'center center',\r\n                    },\r\n                    // Customize the text\r\n                    text: {\r\n                      // Text color\r\n                      fill: 'linear-gradient(#0052D4, #4364F7, #6FB1FC)',\r\n                      // Text size\r\n                      fontSize: '2rem',\r\n                      fontWeight: '800'\r\n                    },\r\n                    // Customize background - only used when the `background` prop is true\r\n                    background: {\r\n                      fill: 'transparent',\r\n                    },\r\n                  }}\r\n                />\r\n                    \r\n                \r\n            </div>\r\n            </Link>\r\n        )\r\n    }\r\n};","C:\\Users\\yash\\Documents\\Projects\\CodeForces\\Upsolve\\upsolve\\src\\Challenge\\ChallengeUpsolveQues.js",["329","330"],"C:\\Users\\yash\\Documents\\Projects\\CodeForces\\Upsolve\\upsolve\\src\\Challenge\\ProblemCardTitle.js",[],"C:\\Users\\yash\\Documents\\Projects\\CodeForces\\Upsolve\\upsolve\\src\\Challenge\\ProblemDescription.js",["331","332","333","334"],"import Skeleton from '@material-ui/lab/Skeleton';\r\nimport fetch from 'node-fetch';\r\nimport React, { useEffect,useState } from 'react';\r\nimport {Check} from '../Api/problem.api';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport { Snackbar } from '@material-ui/core';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\n\r\nfunction ProblemDescription(props) {\r\n\r\n    const [checking,setchecking] = useState(false);\r\n    const [SnackBarOpen, setSnackBarOpen] = React.useState(false);\r\n    const [AlertMsg,setAlertMsg] = useState(\"\");\r\n\r\n    function Alert(props) {\r\n        return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n      }\r\n      \r\n\r\n    let CheckProblem = () =>{\r\n        setchecking(true);\r\n        \r\n        Check(props,props.upsolve!==undefined ? \"upsolve\" : \"daily\").then((result) => {\r\n            setchecking(false);\r\n            if(result === true){\r\n                if(props.upsolve===undefined){\r\n                    props.updatesolved(true);\r\n                    \r\n                } \r\n                else{\r\n                    props.updateupsolve(true);\r\n                    \r\n                }\r\n\r\n                setAlertMsg(<Alert onClose={() => setSnackBarOpen(false)} severity=\"success\">\r\n                        Great Job! 🥳  \r\n                    </Alert>)\r\n                setSnackBarOpen(true)\r\n                \r\n            }else{\r\n                setAlertMsg(<Alert onClose={() => setSnackBarOpen(false)} severity=\"error\">\r\n                        The Solution is not accepted yet! Try Again.\r\n                    </Alert>)\r\n                setSnackBarOpen(true)\r\n                \r\n            }\r\n        })\r\n    }\r\n    return(\r\n        props.Error===null ?\r\n            !props.solved ?\r\n            (props.problem?.name ? \r\n            <>\r\n            <div className=\"problem-description\">\r\n                <div className=\"description\">\r\n                    <label>Problem: </label>\r\n                    <a href={props.problem?.link} target=\"_blank\">{props.problem?.name}</a>\r\n                    <label>ContestID: </label>\r\n                    <a href={\"https://codeforces.com/contest/\"+props.problem?.contestId} target=\"_blank\">{props.problem?.contestId}</a>\r\n                    <label>Rating: </label>\r\n                    <p>{props.problem?.rating}</p>\r\n                </div>\r\n                <button className=\"shadow\" onClick={CheckProblem} disabled={checking}>{checking?\"Checking...\":\"Check\"}</button>\r\n                \r\n            </div>\r\n            <Snackbar open={SnackBarOpen} autoHideDuration={5000} onClose={() => setSnackBarOpen(false)}>\r\n                    {AlertMsg}\r\n                </Snackbar>\r\n            </>\r\n            :\r\n            <div style={{width:\"100%\"}}>\r\n                <Skeleton width=\"78%\" height=\"3rem\" style={{margin:\"0.7rem auto\",color:\"grey\",borderRadius:\"999px\"}}></Skeleton>\r\n                <Skeleton width=\"78%\" height=\"3rem\" style={{margin:\"0 auto 0.7rem auto\",color:\"grey\",borderRadius:\"999px\"}}></Skeleton>\r\n                <Skeleton width=\"78%\" height=\"3rem\" style={{margin:\"0 auto 0.7rem auto\",color:\"grey\",borderRadius:\"999px\"}}></Skeleton>\r\n                <Skeleton width=\"78%\" height=\"3rem\" style={{margin:\"0 auto 0.7rem auto\",color:\"grey\",borderRadius:\"999px\"}}></Skeleton>\r\n            </div>)\r\n            :\r\n            (\r\n                <div className=\"problem-description\">\r\n                    <h1>Solve More upsolve questions</h1>\r\n                </div>\r\n            ) \r\n        :\r\n        (\r\n            <div className=\"problem-description\">\r\n                <h1>{props.Error} <Tooltip title=\"Refresh\" arrow><i className=\"fa fa-refresh\" role=\"button\" onClick={() => {props.refresh()}}></i></Tooltip></h1>\r\n            </div>\r\n        )   \r\n\r\n        \r\n    )\r\n}\r\n\r\nexport default ProblemDescription;","C:\\Users\\yash\\Documents\\Projects\\CodeForces\\Upsolve\\upsolve\\src\\models\\UpsolveText.js",[],["335","336"],"C:\\Users\\yash\\Documents\\Projects\\CodeForces\\Upsolve\\upsolve\\src\\constants.js",[],"C:\\Users\\yash\\Documents\\Projects\\CodeForces\\Upsolve\\upsolve\\src\\About\\AboutPage.js",[],"C:\\Users\\yash\\Documents\\Projects\\CodeForces\\Upsolve\\upsolve\\src\\About\\Team.js",["337","338","339","340"],"C:\\Users\\yash\\Documents\\Projects\\CodeForces\\Upsolve\\upsolve\\src\\About\\UpsolveDesc.js",["341"],"C:\\Users\\yash\\Documents\\Projects\\CodeForces\\Upsolve\\upsolve\\src\\About\\ContactUs.js",["342"],"import React, { useState,useRef } from 'react'\r\nimport { AddFeedback } from '../Api/feedback.api';\r\nimport {Webhook,MessageBuilder} from 'discord-webhook-node';\r\n\r\nexport default function ContactUs() {\r\n\r\n    const [loading,setloading] = useState(false);\r\n    const name = useRef(\"\");\r\n    const email = useRef(\"\");\r\n    const feedback = useRef(\"\");\r\n    const hook = new Webhook('https://discord.com/api/webhooks/843801563846934539/wRQ0qTMn-i-6_M4lN2X60O5Q5kE6UMCW3Fk1brDWh0wVBd_QAZzXe5f6rW6FvYsdM-vA');\r\n    hook.setUsername('Upsolve Feedback');\r\n    \r\n\r\n    let HandleSubmit = async (e)=>{\r\n        e.preventDefault();\r\n        setloading(true);\r\n        if(name.current.value === \"\" || email.current.value === \"\" || feedback.current.value === \"\"){\r\n            setloading(false);\r\n            return;\r\n        }\r\n        let response = await AddFeedback(name.current.value,email.current.value,feedback.current.value);\r\n        const msg = new MessageBuilder().setTitle(name.current.value+' has provided a Feedback').addField('Feedback',feedback.current.value).addField('Email',email.current.value)\r\n        name.current.value = \"\";\r\n        email.current.value = \"\";\r\n        feedback.current.value = \"\";\r\n        setloading(false);\r\n\r\n        \r\n\r\n        hook.send(msg);\r\n\r\n    }\r\n\r\n    return (\r\n        <section className=\"col-12 mt-5\">\r\n            <h1 className=\"text-center mb-5 team-section-title\">Help Us To Improve</h1>\r\n            <form disabled={loading} className=\"d-flex justify-content-between align-items-center flex-column col-lg-6 col-md-6 col-10 mx-auto feedback-form mb-5\" style={{rowGap: \"1rem\"}} onSubmit={(e) => {HandleSubmit(e)}}>\r\n                <input type=\"text\" ref={name} required placeholder=\"Name\" className=\"w-50\"></input>\r\n                <input type=\"email\" required ref={email} placeholder=\"Email\" className=\"w-50\"></input>\r\n                <textarea rows=\"3\" required ref={feedback} placeholder=\"Feedback\" className=\"w-50\"></textarea>\r\n                <button type=\"submit\" className=\"btn btn-primary text-center\">{loading ? \"Submitting..\" : \"Submit\"}</button>\r\n            </form>\r\n        </section>\r\n    )\r\n}\r\n","C:\\Users\\yash\\Documents\\Projects\\CodeForces\\Upsolve\\upsolve\\src\\Api\\feedback.api.js",[],{"ruleId":"343","replacedBy":"344"},{"ruleId":"345","replacedBy":"346"},{"ruleId":"347","severity":1,"message":"348","line":2,"column":34,"nodeType":"349","messageId":"350","endLine":2,"endColumn":38},{"ruleId":"347","severity":1,"message":"351","line":2,"column":8,"nodeType":"349","messageId":"350","endLine":2,"endColumn":13},{"ruleId":"352","severity":1,"message":"353","line":63,"column":21,"nodeType":"354","endLine":63,"endColumn":32},{"ruleId":"347","severity":1,"message":"355","line":2,"column":9,"nodeType":"349","messageId":"350","endLine":2,"endColumn":16},{"ruleId":"347","severity":1,"message":"356","line":5,"column":17,"nodeType":"349","messageId":"350","endLine":5,"endColumn":24},{"ruleId":"347","severity":1,"message":"357","line":1,"column":27,"nodeType":"349","messageId":"350","endLine":1,"endColumn":35},{"ruleId":"347","severity":1,"message":"351","line":2,"column":8,"nodeType":"349","messageId":"350","endLine":2,"endColumn":13},{"ruleId":"347","severity":1,"message":"358","line":22,"column":12,"nodeType":"349","messageId":"350","endLine":22,"endColumn":19},{"ruleId":"347","severity":1,"message":"359","line":23,"column":12,"nodeType":"349","messageId":"350","endLine":23,"endColumn":23},{"ruleId":"347","severity":1,"message":"360","line":24,"column":12,"nodeType":"349","messageId":"350","endLine":24,"endColumn":15},{"ruleId":"347","severity":1,"message":"361","line":24,"column":16,"nodeType":"349","messageId":"350","endLine":24,"endColumn":22},{"ruleId":"347","severity":1,"message":"362","line":2,"column":10,"nodeType":"349","messageId":"350","endLine":2,"endColumn":19},{"ruleId":"363","severity":1,"message":"364","line":13,"column":43,"nodeType":"365","messageId":"366","endLine":13,"endColumn":45},{"ruleId":"367","severity":1,"message":"368","line":13,"column":15,"nodeType":"365","endLine":34,"endColumn":6},{"ruleId":"367","severity":1,"message":"369","line":34,"column":7,"nodeType":"370","endLine":34,"endColumn":9,"suggestions":"371"},{"ruleId":"352","severity":1,"message":"353","line":20,"column":21,"nodeType":"354","endLine":20,"endColumn":51},{"ruleId":"352","severity":1,"message":"353","line":27,"column":21,"nodeType":"354","endLine":27,"endColumn":133},{"ruleId":"352","severity":1,"message":"353","line":34,"column":21,"nodeType":"354","endLine":34,"endColumn":94},{"ruleId":"347","severity":1,"message":"372","line":14,"column":18,"nodeType":"349","messageId":"350","endLine":14,"endColumn":26},{"ruleId":"373","severity":1,"message":"374","line":43,"column":31,"nodeType":"375","messageId":"376","endLine":43,"endColumn":33},{"ruleId":"347","severity":1,"message":"377","line":40,"column":10,"nodeType":"349","messageId":"350","endLine":40,"endColumn":22},{"ruleId":"363","severity":1,"message":"364","line":75,"column":46,"nodeType":"365","messageId":"366","endLine":75,"endColumn":48},{"ruleId":"378","severity":1,"message":"379","line":88,"column":196,"nodeType":"380","endLine":88,"endColumn":211},{"ruleId":"378","severity":1,"message":"379","line":89,"column":126,"nodeType":"380","endLine":89,"endColumn":141},{"ruleId":"381","severity":1,"message":"382","line":111,"column":21,"nodeType":"354","endLine":111,"endColumn":152},{"ruleId":"352","severity":1,"message":"353","line":134,"column":29,"nodeType":"354","endLine":134,"endColumn":111},{"ruleId":"383","severity":1,"message":"384","line":134,"column":37,"nodeType":"385","messageId":"386","endLine":134,"endColumn":59},{"ruleId":"352","severity":1,"message":"353","line":137,"column":29,"nodeType":"354","endLine":137,"endColumn":111},{"ruleId":"383","severity":1,"message":"384","line":137,"column":37,"nodeType":"385","messageId":"386","endLine":137,"endColumn":59},{"ruleId":"352","severity":1,"message":"353","line":140,"column":29,"nodeType":"354","endLine":140,"endColumn":107},{"ruleId":"383","severity":1,"message":"384","line":140,"column":37,"nodeType":"385","messageId":"386","endLine":140,"endColumn":59},{"ruleId":"352","severity":1,"message":"353","line":143,"column":29,"nodeType":"354","endLine":143,"endColumn":117},{"ruleId":"383","severity":1,"message":"384","line":143,"column":37,"nodeType":"385","messageId":"386","endLine":143,"endColumn":59},{"ruleId":"347","severity":1,"message":"387","line":8,"column":13,"nodeType":"349","messageId":"350","endLine":8,"endColumn":15},{"ruleId":"367","severity":1,"message":"388","line":31,"column":7,"nodeType":"370","endLine":31,"endColumn":28,"suggestions":"389"},{"ruleId":"347","severity":1,"message":"390","line":1,"column":8,"nodeType":"349","messageId":"350","endLine":1,"endColumn":16},{"ruleId":"367","severity":1,"message":"388","line":34,"column":7,"nodeType":"370","endLine":34,"endColumn":29,"suggestions":"391"},{"ruleId":"347","severity":1,"message":"351","line":2,"column":8,"nodeType":"349","messageId":"350","endLine":2,"endColumn":13},{"ruleId":"347","severity":1,"message":"362","line":3,"column":17,"nodeType":"349","messageId":"350","endLine":3,"endColumn":26},{"ruleId":"378","severity":1,"message":"379","line":30,"column":51,"nodeType":"380","endLine":30,"endColumn":66},{"ruleId":"378","severity":1,"message":"379","line":32,"column":90,"nodeType":"380","endLine":32,"endColumn":105},{"ruleId":"347","severity":1,"message":"392","line":1,"column":10,"nodeType":"349","messageId":"350","endLine":1,"endColumn":25},{"ruleId":"343","replacedBy":"393"},{"ruleId":"345","replacedBy":"394"},{"ruleId":"347","severity":1,"message":"348","line":2,"column":34,"nodeType":"349","messageId":"350","endLine":2,"endColumn":38},{"ruleId":"347","severity":1,"message":"395","line":62,"column":9,"nodeType":"349","messageId":"350","endLine":62,"endColumn":16},{"ruleId":"347","severity":1,"message":"357","line":1,"column":27,"nodeType":"349","messageId":"350","endLine":1,"endColumn":35},{"ruleId":"347","severity":1,"message":"362","line":2,"column":10,"nodeType":"349","messageId":"350","endLine":2,"endColumn":19},{"ruleId":"363","severity":1,"message":"364","line":12,"column":43,"nodeType":"365","messageId":"366","endLine":12,"endColumn":45},{"ruleId":"367","severity":1,"message":"368","line":14,"column":15,"nodeType":"365","endLine":41,"endColumn":6},{"ruleId":"367","severity":1,"message":"369","line":41,"column":7,"nodeType":"370","endLine":41,"endColumn":9,"suggestions":"396"},{"ruleId":"347","severity":1,"message":"351","line":2,"column":8,"nodeType":"349","messageId":"350","endLine":2,"endColumn":13},{"ruleId":"367","severity":1,"message":"397","line":174,"column":7,"nodeType":"370","endLine":174,"endColumn":9,"suggestions":"398"},{"ruleId":"352","severity":1,"message":"399","line":199,"column":21,"nodeType":"354","endLine":199,"endColumn":134},{"ruleId":"347","severity":1,"message":"351","line":2,"column":8,"nodeType":"349","messageId":"350","endLine":2,"endColumn":13},{"ruleId":"347","severity":1,"message":"400","line":9,"column":8,"nodeType":"349","messageId":"350","endLine":9,"endColumn":17},{"ruleId":"347","severity":1,"message":"348","line":4,"column":9,"nodeType":"349","messageId":"350","endLine":4,"endColumn":13},{"ruleId":"352","severity":1,"message":"399","line":29,"column":21,"nodeType":"354","endLine":29,"endColumn":93},{"ruleId":"352","severity":1,"message":"353","line":73,"column":32,"nodeType":"354","endLine":73,"endColumn":105},{"ruleId":"347","severity":1,"message":"372","line":14,"column":18,"nodeType":"349","messageId":"350","endLine":14,"endColumn":26},{"ruleId":"373","severity":1,"message":"374","line":43,"column":31,"nodeType":"375","messageId":"376","endLine":43,"endColumn":33},{"ruleId":"363","severity":1,"message":"364","line":9,"column":43,"nodeType":"365","messageId":"366","endLine":9,"endColumn":45},{"ruleId":"363","severity":1,"message":"364","line":89,"column":50,"nodeType":"365","messageId":"366","endLine":89,"endColumn":52},{"ruleId":"378","severity":1,"message":"379","line":102,"column":172,"nodeType":"354","messageId":"401","endLine":102,"endColumn":216,"fix":"402"},{"ruleId":"378","severity":1,"message":"379","line":103,"column":102,"nodeType":"354","messageId":"401","endLine":103,"endColumn":146,"fix":"403"},{"ruleId":"381","severity":1,"message":"382","line":126,"column":21,"nodeType":"354","endLine":126,"endColumn":152},{"ruleId":"367","severity":1,"message":"388","line":31,"column":7,"nodeType":"370","endLine":31,"endColumn":28,"suggestions":"404"},{"ruleId":"347","severity":1,"message":"387","line":9,"column":13,"nodeType":"349","messageId":"350","endLine":9,"endColumn":15},{"ruleId":"347","severity":1,"message":"390","line":1,"column":8,"nodeType":"349","messageId":"350","endLine":1,"endColumn":16},{"ruleId":"367","severity":1,"message":"388","line":34,"column":7,"nodeType":"370","endLine":34,"endColumn":29,"suggestions":"405"},{"ruleId":"347","severity":1,"message":"351","line":2,"column":8,"nodeType":"349","messageId":"350","endLine":2,"endColumn":13},{"ruleId":"347","severity":1,"message":"362","line":3,"column":17,"nodeType":"349","messageId":"350","endLine":3,"endColumn":26},{"ruleId":"378","severity":1,"message":"379","line":57,"column":21,"nodeType":"354","messageId":"401","endLine":57,"endColumn":67,"fix":"406"},{"ruleId":"378","severity":1,"message":"379","line":59,"column":21,"nodeType":"354","messageId":"401","endLine":59,"endColumn":106,"fix":"407"},{"ruleId":"343","replacedBy":"408"},{"ruleId":"345","replacedBy":"409"},{"ruleId":"410","severity":1,"message":"411","line":23,"column":184,"nodeType":"354","endLine":23,"endColumn":224},{"ruleId":"410","severity":1,"message":"411","line":24,"column":184,"nodeType":"354","endLine":24,"endColumn":227},{"ruleId":"410","severity":1,"message":"411","line":25,"column":186,"nodeType":"354","endLine":25,"endColumn":230},{"ruleId":"410","severity":1,"message":"411","line":26,"column":186,"nodeType":"354","endLine":26,"endColumn":227},{"ruleId":"410","severity":1,"message":"411","line":19,"column":13,"nodeType":"354","endLine":19,"endColumn":127},{"ruleId":"347","severity":1,"message":"412","line":22,"column":13,"nodeType":"349","messageId":"350","endLine":22,"endColumn":21},"no-native-reassign",["413"],"no-negated-in-lhs",["414"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'fetch' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'Profile' is defined but never used.","'setuser' is assigned a value but never used.","'useState' is defined but never used.","'country' is assigned a value but never used.","'institution' is assigned a value but never used.","'bio' is assigned a value but never used.","'setbio' is assigned a value but never used.","'useEffect' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","React Hook useEffect has a missing dependency: 'paramUsername'. Either include it or remove the dependency array.","ArrayExpression",["415"],"'setlimit' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'getFirstName' is defined but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","no-script-url","Script URL is a form of eval.","Literal","unexpectedScriptURL","'id' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array.",["416"],"'Skeleton' is defined but never used.",["417"],"'PromiseProvider' is defined but never used.",["413"],["414"],"'Profile' is assigned a value but never used.",["418"],"React Hook useEffect has missing dependencies: 'password' and 'username'. Either include them or remove the dependency array.",["419"],"The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'Countdown' is defined but never used.","noTargetBlank",{"range":"420","text":"421"},{"range":"422","text":"421"},["423"],["424"],{"range":"425","text":"421"},{"range":"426","text":"421"},["413"],["414"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'response' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"427","fix":"428"},{"desc":"429","fix":"430"},{"desc":"431","fix":"432"},{"desc":"427","fix":"433"},{"desc":"434","fix":"435"},[3266,3266]," rel=\"noreferrer\"",[3440,3440],{"desc":"429","fix":"436"},{"desc":"431","fix":"437"},[1998,1998],[2178,2178],"Update the dependencies array to be: [paramUsername]",{"range":"438","text":"439"},"Update the dependencies array to be: [problemError, props, solved]",{"range":"440","text":"441"},"Update the dependencies array to be: [problemError, props, upsolve]",{"range":"442","text":"443"},{"range":"444","text":"439"},"Update the dependencies array to be: [password, username]",{"range":"445","text":"446"},{"range":"447","text":"441"},{"range":"448","text":"443"},[855,857],"[paramUsername]",[1045,1066],"[problemError, props, solved]",[1099,1121],"[problemError, props, upsolve]",[1231,1233],[6613,6615],"[password, username]",[1045,1066],[1099,1121]]